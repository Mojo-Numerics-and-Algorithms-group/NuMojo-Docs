{
  "decl": {
    "description": "",
    "kind": "package",
    "modules": [
      {
        "aliases": [
          {
            "deprecated": "",
            "description": "",
            "kind": "alias",
            "name": "pi",
            "summary": "",
            "value": "#kgen.float_literal<31415926535897932384626433832795028841971693937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555954930381966446229489|10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>"
          },
          {
            "deprecated": "",
            "description": "",
            "kind": "alias",
            "name": "e",
            "summary": "",
            "value": "#kgen.float_literal<139176029617103116050446718533256319885171|51200000000000000000000000000000000000000>"
          },
          {
            "deprecated": "",
            "description": "",
            "kind": "alias",
            "name": "c",
            "summary": "",
            "value": "299792458"
          }
        ],
        "description": "",
        "functions": [],
        "kind": "module",
        "name": "__init__",
        "structs": [],
        "summary": "An Array Mathematics library for Mojo.",
        "traits": []
      }
    ],
    "name": "numojo",
    "packages": [
      {
        "description": "",
        "kind": "package",
        "modules": [
          {
            "aliases": [],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "__init__",
            "structs": [],
            "summary": "",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "arange",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "Scalar[in_dtype] - Start value.",
                        "kind": "argument",
                        "name": "start",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[in_dtype, 1]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "Scalar[in_dtype]  - End value.",
                        "kind": "argument",
                        "name": "stop",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[in_dtype, 1]"
                      },
                      {
                        "convention": "borrowed",
                        "default": "1",
                        "description": "Scalar[in_dtype]  - Step size between each element (default 1).",
                        "kind": "argument",
                        "name": "step",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[in_dtype, 1]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "arange",
                    "parameters": [
                      {
                        "description": "Input datatype of the input values.",
                        "kind": "parameter",
                        "name": "in_dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "float64",
                        "description": "Output datatype of the output NDArray.",
                        "kind": "parameter",
                        "name": "out_dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "Error if both in_dtype and out_dtype are integers or if in_dtype is a float and out_dtype is an integer.",
                    "returnType": "NDArray[$1]",
                    "returnsDoc": "A NDArray of datatype `out_dtype` with elements ranging from `start` to `stop` incremented with `step`.",
                    "signature": "arange[in_dtype: DType, out_dtype: DType = float64](start: SIMD[in_dtype, 1], stop: SIMD[in_dtype, 1], step: SIMD[in_dtype, 1] = 1) -> NDArray[$1]",
                    "summary": "Function that computes a series of values starting from \"start\" to \"stop\" with given \"step\" size."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "linspace",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "Start value.",
                        "kind": "argument",
                        "name": "start",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[in_dtype, 1]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "End value.",
                        "kind": "argument",
                        "name": "stop",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[in_dtype, 1]"
                      },
                      {
                        "convention": "borrowed",
                        "default": "50",
                        "description": "No of linearly spaced elements.",
                        "kind": "argument",
                        "name": "num",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      },
                      {
                        "convention": "borrowed",
                        "default": "1",
                        "description": "Specifies whether to include endpoint in the final NDArray, defaults to True.",
                        "kind": "argument",
                        "name": "endpoint",
                        "passingKind": "pos_or_kw",
                        "type": "Bool"
                      },
                      {
                        "convention": "borrowed",
                        "default": "0",
                        "description": "Specifies whether the linspace should be calculated using parallelization, deafults to False.",
                        "kind": "argument",
                        "name": "parallel",
                        "passingKind": "pos_or_kw",
                        "type": "Bool"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "linspace",
                    "parameters": [
                      {
                        "description": "Datatype of the input values.",
                        "kind": "parameter",
                        "name": "in_dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "float64",
                        "description": "Datatype of the output NDArray.",
                        "kind": "parameter",
                        "name": "out_dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "Error if both in_dtype and out_dtype are integers or if in_dtype is a float and out_dtype is an integer.",
                    "returnType": "NDArray[$1]",
                    "returnsDoc": "A NDArray of datatype `out_dtype` with elements ranging from `start` to `stop` with num elements.",
                    "signature": "linspace[in_dtype: DType, out_dtype: DType = float64](start: SIMD[in_dtype, 1], stop: SIMD[in_dtype, 1], num: Int = 50, endpoint: Bool = 1, parallel: Bool = 0) -> NDArray[$1]",
                    "summary": "Function that computes a series of linearly spaced values starting from \"start\" to \"stop\" with given size. Wrapper function for _linspace_serial, _linspace_parallel."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "logspace",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "The starting value of the NDArray.",
                        "kind": "argument",
                        "name": "start",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[in_dtype, 1]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "The ending value of the NDArray.",
                        "kind": "argument",
                        "name": "stop",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[in_dtype, 1]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "The number of elements in the NDArray.",
                        "kind": "argument",
                        "name": "num",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      },
                      {
                        "convention": "borrowed",
                        "default": "1",
                        "description": "Whether to include the `stop` value in the NDArray. Defaults to True.",
                        "kind": "argument",
                        "name": "endpoint",
                        "passingKind": "pos_or_kw",
                        "type": "Bool"
                      },
                      {
                        "convention": "borrowed",
                        "default": "#kgen.float_literal<10|1>",
                        "description": "Base value of the logarithm, defaults to 10.",
                        "kind": "argument",
                        "name": "base",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[in_dtype, 1]"
                      },
                      {
                        "convention": "borrowed",
                        "default": "0",
                        "description": "Specifies whether to calculate the logarithmic spaced values using parallelization.",
                        "kind": "argument",
                        "name": "parallel",
                        "passingKind": "pos_or_kw",
                        "type": "Bool"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "logspace",
                    "parameters": [
                      {
                        "description": "Datatype of the input values.",
                        "kind": "parameter",
                        "name": "in_dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "float64",
                        "description": "Datatype of the output NDArray.",
                        "kind": "parameter",
                        "name": "out_dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "Error if both in_dtype and out_dtype are integers or if in_dtype is a float and out_dtype is an integer.",
                    "returnType": "NDArray[$1]",
                    "returnsDoc": "- A NDArray of `dtype` with `num` logarithmic spaced elements between `start` and `stop`.",
                    "signature": "logspace[in_dtype: DType, out_dtype: DType = float64](start: SIMD[in_dtype, 1], stop: SIMD[in_dtype, 1], num: Int, endpoint: Bool = 1, base: SIMD[in_dtype, 1] = #kgen.float_literal<10|1>, parallel: Bool = 0) -> NDArray[$1]",
                    "summary": "Generate a logrithmic spaced NDArray of `num` elements between `start` and `stop`. Wrapper function for _logspace_serial, _logspace_parallel functions."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "geomspace",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "The starting value of the NDArray.",
                        "kind": "argument",
                        "name": "start",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[in_dtype, 1]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "The ending value of the NDArray.",
                        "kind": "argument",
                        "name": "stop",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[in_dtype, 1]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "The number of elements in the NDArray.",
                        "kind": "argument",
                        "name": "num",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      },
                      {
                        "convention": "borrowed",
                        "default": "1",
                        "description": "Whether to include the `stop` value in the NDArray. Defaults to True.",
                        "kind": "argument",
                        "name": "endpoint",
                        "passingKind": "pos_or_kw",
                        "type": "Bool"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "geomspace",
                    "parameters": [
                      {
                        "description": "Datatype of the input values.",
                        "kind": "parameter",
                        "name": "in_dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "float64",
                        "description": "Datatype of the output NDArray.",
                        "kind": "parameter",
                        "name": "out_dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "Error if both in_dtype and out_dtype are integers or if in_dtype is a float and out_dtype is an integer.",
                    "returnType": "NDArray[$1]",
                    "returnsDoc": "A NDArray of `dtype` with `num` geometrically spaced elements between `start` and `stop`.",
                    "signature": "geomspace[in_dtype: DType, out_dtype: DType = float64](start: SIMD[in_dtype, 1], stop: SIMD[in_dtype, 1], num: Int, endpoint: Bool = 1) -> NDArray[$1]",
                    "summary": "Generate a NDArray of `num` elements between `start` and `stop` in a geometric series."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "empty",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "Shape of the NDArray.",
                        "kind": "argument",
                        "name": "*shape",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "empty",
                    "parameters": [
                      {
                        "description": "Datatype of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray of `dtype` with given `shape`.",
                    "signature": "empty[dtype: DType](*shape: Int) -> NDArray[$0]",
                    "summary": "Generate a NDArray of given shape with arbitrary values."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "zeros",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "Shape of the NDArray.",
                        "kind": "argument",
                        "name": "*shape",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "zeros",
                    "parameters": [
                      {
                        "description": "Datatype of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray of `dtype` with given `shape`.",
                    "signature": "zeros[dtype: DType](*shape: Int) -> NDArray[$0]",
                    "summary": "Generate a NDArray of zeros with given shape."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "eye",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "Number of rows in the matrix.",
                        "kind": "argument",
                        "name": "N",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      },
                      {
                        "convention": "borrowed",
                        "description": "Number of columns in the matrix.",
                        "kind": "argument",
                        "name": "M",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "eye",
                    "parameters": [
                      {
                        "description": "Datatype of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray of `dtype` with size N x M and ones on the diagonals.",
                    "signature": "eye[dtype: DType](N: Int, M: Int) -> NDArray[$0]",
                    "summary": "Return a 2-D NDArray with ones on the diagonal and zeros elsewhere."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "identity",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "Size of the matrix.",
                        "kind": "argument",
                        "name": "N",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "identity",
                    "parameters": [
                      {
                        "description": "Datatype of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray of `dtype` with size N x N and ones on the diagonals.",
                    "signature": "identity[dtype: DType](N: Int) -> NDArray[$0]",
                    "summary": "Generate an identity matrix of size N x N."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "ones",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "Shape of the NDArray.",
                        "kind": "argument",
                        "name": "*shape",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "ones",
                    "parameters": [
                      {
                        "description": "Datatype of the NDArray.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray of `dtype` with given `shape`.",
                    "signature": "ones[dtype: DType](*shape: Int) -> NDArray[$0]",
                    "summary": "Generate a NDArray of ones with given shape filled with ones."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "full",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "Shape of the NDArray.",
                        "kind": "argument",
                        "name": "*shape",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      },
                      {
                        "convention": "borrowed",
                        "description": "Value to be splatted over the NDArray.",
                        "kind": "argument",
                        "name": "fill_value",
                        "passingKind": "kw",
                        "type": "SIMD[dtype, 1]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "full",
                    "parameters": [
                      {
                        "description": "Datatype of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray of `dtype` with given `shape`.",
                    "signature": "full[dtype: DType](*shape: Int, *, fill_value: SIMD[dtype, 1]) -> NDArray[$0]",
                    "summary": "Generate a NDArray of `fill_value` with given shape."
                  },
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "Shape of the NDArray.",
                        "kind": "argument",
                        "name": "shape",
                        "passingKind": "pos_or_kw",
                        "type": "VariadicList[Int]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "Value to be splatted over the NDArray.",
                        "kind": "argument",
                        "name": "fill_value",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "full",
                    "parameters": [
                      {
                        "description": "Datatype of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray of `dtype` with given `shape`.",
                    "signature": "full[dtype: DType](shape: VariadicList[Int], fill_value: SIMD[dtype, 1]) -> NDArray[$0]",
                    "summary": "Generate a NDArray of `fill_value` with given shape."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "diagflat",
                "overloads": [
                  {
                    "args": [],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "diagflat",
                    "parameters": [],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": null,
                    "returnsDoc": "",
                    "signature": "diagflat()",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "tri",
                "overloads": [
                  {
                    "args": [],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "tri",
                    "parameters": [],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": null,
                    "returnsDoc": "",
                    "signature": "tri()",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "tril",
                "overloads": [
                  {
                    "args": [],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "tril",
                    "parameters": [],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": null,
                    "returnsDoc": "",
                    "signature": "tril()",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "triu",
                "overloads": [
                  {
                    "args": [],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "triu",
                    "parameters": [],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": null,
                    "returnsDoc": "",
                    "signature": "triu()",
                    "summary": ""
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "array_creation_routines",
            "structs": [],
            "summary": "Array creation routine.",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "copyto",
                "overloads": [
                  {
                    "args": [],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "copyto",
                    "parameters": [],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": null,
                    "returnsDoc": "",
                    "signature": "copyto()",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "shape",
                "overloads": [
                  {
                    "args": [],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "shape",
                    "parameters": [],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": null,
                    "returnsDoc": "",
                    "signature": "shape()",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "reshape",
                "overloads": [
                  {
                    "args": [],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "reshape",
                    "parameters": [],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": null,
                    "returnsDoc": "",
                    "signature": "reshape()",
                    "summary": ""
                  }
                ]
              },
              {
                "kind": "function",
                "name": "ravel",
                "overloads": [
                  {
                    "args": [],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "ravel",
                    "parameters": [],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": null,
                    "returnsDoc": "",
                    "signature": "ravel()",
                    "summary": ""
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "array_manipulation_routines",
            "structs": [],
            "summary": "Array manipulation routines.",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "constants",
            "structs": [
              {
                "aliases": [
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "c",
                    "summary": "",
                    "value": "299792458"
                  },
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "pi",
                    "summary": "",
                    "value": "#kgen.float_literal<31415926535897932384626433832795028841971693937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555954930381966446229489|10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>"
                  },
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "e",
                    "summary": "",
                    "value": "#kgen.float_literal<139176029617103116050446718533256319885171|51200000000000000000000000000000000000000>"
                  }
                ],
                "constraints": "",
                "deprecated": "",
                "description": "Use alias for compile time evaluation of indefinite precision.\n```mojo\nimport numojo as nm\nfn main():\n    var pi: Float64 = nm.pi\n    print(\"Float64:\", pi*pi*pi*pi*pi*pi)\n    print(\"Literal:\", nm.pi*nm.pi*nm.pi*nm.pi*nm.pi*nm.pi)\n```\n```console\nFloat64: 961.38919357530415\nLiteral: 961.38919357530449\n```",
                "fields": [],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self)",
                        "summary": "Initializes the constants."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__del__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "owned",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__del__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__del__(owned self: Self)",
                        "summary": "Deletes the constants."
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "Constants",
                "parameters": [],
                "parentTraits": [
                  "AnyType",
                  "Copyable",
                  "Movable"
                ],
                "summary": "Define constants."
              }
            ],
            "summary": "Constants",
            "traits": []
          },
          {
            "aliases": [
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "i8",
                "summary": "Data type alias for DType.int8",
                "value": "int8"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "i16",
                "summary": "Data type alias for DType.int16",
                "value": "int16"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "i32",
                "summary": "Data type alias for DType.int32",
                "value": "int32"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "i64",
                "summary": "Data type alias for DType.int64",
                "value": "int64"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "u8",
                "summary": "Data type alias for DType.uint8",
                "value": "uint8"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "u16",
                "summary": "Data type alias for DType.uint16",
                "value": "uint16"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "u32",
                "summary": "Data type alias for DType.uint32",
                "value": "uint32"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "u64",
                "summary": "Data type alias for DType.uint64",
                "value": "uint64"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "f16",
                "summary": "Data type alias for DType.float16",
                "value": "float16"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "f32",
                "summary": "Data type alias for DType.float32",
                "value": "float32"
              },
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "f64",
                "summary": "Data type alias for DType.float64",
                "value": "float64"
              }
            ],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "cvtdtype",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "The SIMD value to be converted.",
                        "kind": "argument",
                        "name": "value",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[in_dtype, width]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "cvtdtype",
                    "parameters": [
                      {
                        "description": "The input datatype.",
                        "kind": "parameter",
                        "name": "in_dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "description": "The output dataytpe.",
                        "kind": "parameter",
                        "name": "out_dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "1",
                        "description": "The width of the SIMD vector.",
                        "kind": "parameter",
                        "name": "width",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": "SIMD[$1, $2]",
                    "returnsDoc": "The `value` with its dtype cast as out_dtype.",
                    "signature": "cvtdtype[in_dtype: DType, out_dtype: DType, width: Int = 1](value: SIMD[in_dtype, width]) -> SIMD[$1, $2]",
                    "summary": "Converts datatype of a value from in_dtype to out_dtype at run time."
                  },
                  {
                    "args": [],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "cvtdtype",
                    "parameters": [
                      {
                        "description": "The input datatype.",
                        "kind": "parameter",
                        "name": "in_dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "description": "The output dataytpe.",
                        "kind": "parameter",
                        "name": "out_dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "1",
                        "description": "The width of the SIMD vector.",
                        "kind": "parameter",
                        "name": "width",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      },
                      {
                        "default": "__init__[stdlib::builtin::bool::Boolable](SIMD())",
                        "description": "The SIMD value to be converted.",
                        "kind": "parameter",
                        "name": "value",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[$0, $2]"
                      }
                    ],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": "SIMD[$1, $2]",
                    "returnsDoc": "The `value` with its dtype cast as out_dtype.",
                    "signature": "cvtdtype[in_dtype: DType, out_dtype: DType, width: Int = 1, value: SIMD[$0, $2] = __init__[stdlib::builtin::bool::Boolable](SIMD())]() -> SIMD[$1, $2]",
                    "summary": "Converts datatype of a value from in_dtype to out_dtype at compile time."
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "datatypes",
            "structs": [],
            "summary": "Datatypes Module - Implements datatypes aliases, conversions",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "ndarray",
            "structs": [
              {
                "aliases": [],
                "constraints": "",
                "deprecated": "",
                "description": "",
                "fields": [
                  {
                    "description": "",
                    "kind": "field",
                    "name": "ndsize",
                    "summary": "Total no of elements in the corresponding array.",
                    "type": "Int"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "ndshape",
                    "summary": "Shape of the corresponding array.",
                    "type": "DTypePointer[dtype, 0]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "ndlen",
                    "summary": "Length of ndshape.",
                    "type": "Int"
                  }
                ],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "Variable number of integers representing the shape dimensions.",
                            "kind": "argument",
                            "name": "*shape",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self, *shape: Int)",
                        "summary": "Initializes the NDArrayShape with variable shape dimensions."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "Variable number of integers representing the shape dimensions.",
                            "kind": "argument",
                            "name": "*shape",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "borrowed",
                            "description": "The total number of elements in the array.",
                            "kind": "argument",
                            "name": "size",
                            "passingKind": "kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self, *shape: Int, *, size: Int)",
                        "summary": "Initializes the NDArrayShape with variable shape dimensions and a specified size."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A list of integers representing the shape dimensions.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self, shape: List[Int])",
                        "summary": "Initializes the NDArrayShape with a list of shape dimensions."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A list of integers representing the shape dimensions.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "The specified size of the NDArrayShape.",
                            "kind": "argument",
                            "name": "size",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self, shape: List[Int], size: Int)",
                        "summary": "Initializes the NDArrayShape with a list of shape dimensions and a specified size."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A list of integers representing the shape dimensions.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "VariadicList[Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self, shape: VariadicList[Int])",
                        "summary": "Initializes the NDArrayShape with a list of shape dimensions."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A list of integers representing the shape dimensions.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "VariadicList[Int]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "The specified size of the NDArrayShape.",
                            "kind": "argument",
                            "name": "size",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self, shape: VariadicList[Int], size: Int)",
                        "summary": "Initializes the NDArrayShape with a list of shape dimensions and a specified size."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "Another NDArrayShape to initialize from.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "NDArrayShape[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self, shape: NDArrayShape[dtype])",
                        "summary": "Initializes the NDArrayShape with another NDArrayShape."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__getitem__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__getitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "__getitem__(self: Self, index: Int) -> Int",
                        "summary": "Get shape at specified index."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__setitem__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__setitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__setitem__(inout self: Self, index: Int, val: Int)",
                        "summary": "Set shape at specified index."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__eq__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__eq__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "__eq__(self: Self, other: Self) -> Bool",
                        "summary": "Check if two arrayshapes have identical dimensions."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__ne__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ne__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "__ne__(self: Self, other: Self) -> Bool",
                        "summary": "Check if two arrayshapes don't have identical dimensions."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__contains__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__contains__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "__contains__(self: Self, val: Int) -> Bool",
                        "summary": "Check if any of the dimensions are equal to a value."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "size",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "size",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "size(self: Self) -> Int",
                        "summary": "Get Size of array described by arrayshape."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "len",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "len",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "len(self: Self) -> Int",
                        "summary": "Get number of dimensions of the array described by arrayshape."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "load",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "load",
                        "parameters": [
                          {
                            "default": "1",
                            "description": "",
                            "kind": "parameter",
                            "name": "width",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, $0]",
                        "returnsDoc": "",
                        "signature": "load[width: Int = 1](self: Self, index: Int) -> SIMD[dtype, $0]",
                        "summary": "SIMD load dimensional information."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "store",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, width]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "store",
                        "parameters": [
                          {
                            "default": "1",
                            "description": "",
                            "kind": "parameter",
                            "name": "width",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "store[width: Int = 1](inout self: Self, index: Int, val: SIMD[dtype, width])",
                        "summary": "SIMD store dimensional information."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "load_int",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "load_int",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "load_int(self: Self, index: Int) -> Int",
                        "summary": "SIMD load dimensional information."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "store_int",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "store_int",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "store_int(inout self: Self, index: Int, val: Int)",
                        "summary": "SIMD store dimensional information."
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "NDArrayShape",
                "parameters": [
                  {
                    "default": "int32",
                    "description": "",
                    "kind": "parameter",
                    "name": "dtype",
                    "passingKind": "pos_or_kw",
                    "type": "DType"
                  }
                ],
                "parentTraits": [
                  "AnyType",
                  "Stringable"
                ],
                "summary": "Implements the NDArrayShape."
              },
              {
                "aliases": [],
                "constraints": "",
                "deprecated": "",
                "description": "",
                "fields": [
                  {
                    "description": "",
                    "kind": "field",
                    "name": "ndoffset",
                    "summary": "",
                    "type": "Int"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "ndstride",
                    "summary": "",
                    "type": "DTypePointer[dtype, 0]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "ndlen",
                    "summary": "",
                    "type": "Int"
                  }
                ],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "*stride",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "borrowed",
                            "default": "0",
                            "description": "",
                            "kind": "argument",
                            "name": "offset",
                            "passingKind": "kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self, *stride: Int, *, offset: Int = 0)",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "stride",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "borrowed",
                            "default": "0",
                            "description": "",
                            "kind": "argument",
                            "name": "offset",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self, stride: List[Int], offset: Int = 0)",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "stride",
                            "passingKind": "pos_or_kw",
                            "type": "VariadicList[Int]"
                          },
                          {
                            "convention": "borrowed",
                            "default": "0",
                            "description": "",
                            "kind": "argument",
                            "name": "offset",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self, stride: VariadicList[Int], offset: Int = 0)",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "stride",
                            "passingKind": "pos_or_kw",
                            "type": "NDArrayStride[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self, stride: NDArrayStride[dtype])",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "stride",
                            "passingKind": "pos_or_kw",
                            "type": "NDArrayStride[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "default": "0",
                            "description": "",
                            "kind": "argument",
                            "name": "offset",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self, stride: NDArrayStride[dtype], offset: Int = 0)",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "*shape",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "borrowed",
                            "default": "0",
                            "description": "",
                            "kind": "argument",
                            "name": "offset",
                            "passingKind": "kw",
                            "type": "Int"
                          },
                          {
                            "convention": "borrowed",
                            "default": "\"C\"",
                            "description": "",
                            "kind": "argument",
                            "name": "order",
                            "passingKind": "kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self, *shape: Int, *, offset: Int = 0, order: String = \"C\")",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "borrowed",
                            "default": "0",
                            "description": "",
                            "kind": "argument",
                            "name": "offset",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "borrowed",
                            "default": "\"C\"",
                            "description": "",
                            "kind": "argument",
                            "name": "order",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self, shape: List[Int], offset: Int = 0, order: String = \"C\")",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "VariadicList[Int]"
                          },
                          {
                            "convention": "borrowed",
                            "default": "0",
                            "description": "",
                            "kind": "argument",
                            "name": "offset",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "borrowed",
                            "default": "\"C\"",
                            "description": "",
                            "kind": "argument",
                            "name": "order",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self, shape: VariadicList[Int], offset: Int = 0, order: String = \"C\")",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "owned",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "NDArrayShape[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "default": "0",
                            "description": "",
                            "kind": "argument",
                            "name": "offset",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "borrowed",
                            "default": "\"C\"",
                            "description": "",
                            "kind": "argument",
                            "name": "order",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self, owned shape: NDArrayShape[dtype], offset: Int = 0, order: String = \"C\")",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__getitem__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__getitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "__getitem__(self: Self, index: Int) -> Int",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__setitem__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__setitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__setitem__(inout self: Self, index: Int, val: Int)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__eq__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__eq__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "__eq__(self: Self, other: Self) -> Bool",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__ne__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ne__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "__ne__(self: Self, other: Self) -> Bool",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__contains__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__contains__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "__contains__(self: Self, val: Int) -> Bool",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "len",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "len",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "len(self: Self) -> Int",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "load",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "load",
                        "parameters": [
                          {
                            "default": "1",
                            "description": "",
                            "kind": "parameter",
                            "name": "width",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, $0]",
                        "returnsDoc": "",
                        "signature": "load[width: Int = 1](self: Self, index: Int) -> SIMD[dtype, $0]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "store",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, width]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "store",
                        "parameters": [
                          {
                            "default": "1",
                            "description": "",
                            "kind": "parameter",
                            "name": "width",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "store[width: Int = 1](inout self: Self, index: Int, val: SIMD[dtype, width])",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "load_unsafe",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "load_unsafe",
                        "parameters": [
                          {
                            "default": "1",
                            "description": "",
                            "kind": "parameter",
                            "name": "width",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "load_unsafe[width: Int = 1](self: Self, index: Int) -> Int",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "store_unsafe",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, width]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "store_unsafe",
                        "parameters": [
                          {
                            "default": "1",
                            "description": "",
                            "kind": "parameter",
                            "name": "width",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "store_unsafe[width: Int = 1](inout self: Self, index: Int, val: SIMD[dtype, width])",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "NDArrayStride",
                "parameters": [
                  {
                    "default": "int32",
                    "description": "",
                    "kind": "parameter",
                    "name": "dtype",
                    "passingKind": "pos_or_kw",
                    "type": "DType"
                  }
                ],
                "parentTraits": [
                  "AnyType",
                  "Stringable"
                ],
                "summary": "Implements the NDArrayStride."
              },
              {
                "aliases": [
                  {
                    "deprecated": "",
                    "description": "",
                    "kind": "alias",
                    "name": "simd_width",
                    "summary": "Vector size of the data type.",
                    "value": "simdwidthof[stdlib::builtin::dtype::DType,__mlir_type.!kgen.target]()"
                  }
                ],
                "constraints": "",
                "deprecated": "",
                "description": "The array can be uniquely defined by the following:\n    1. The data buffer of all items.\n    2. The shape of the array.\n    3. The stride in each dimension\n    4. The number of dimensions\n    5. The datatype of the elements\n    6. The order of the array: Row vs Columns major",
                "fields": [
                  {
                    "description": "",
                    "kind": "field",
                    "name": "data",
                    "summary": "Data buffer of the items in the NDArray.",
                    "type": "DTypePointer[dtype, 0]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "ndim",
                    "summary": "Number of Dimensions.",
                    "type": "Int"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "ndshape",
                    "summary": "Size and shape of NDArray.",
                    "type": "NDArrayShape[int32]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "stride",
                    "summary": "Contains offset, strides.",
                    "type": "NDArrayStride[int32]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "coefficient",
                    "summary": "Contains offset, coefficient.",
                    "type": "NDArrayStride[int32]"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "datatype",
                    "summary": "The datatype of memory.",
                    "type": "DType"
                  },
                  {
                    "description": "",
                    "kind": "field",
                    "name": "order",
                    "summary": "Memory layout of array C (C order row major) or F (Fortran order col major).",
                    "type": "String"
                  }
                ],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "Variadic shape.",
                            "kind": "argument",
                            "name": "*shape",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "borrowed",
                            "default": "0",
                            "description": "Set the values randomly.",
                            "kind": "argument",
                            "name": "random",
                            "passingKind": "kw",
                            "type": "Bool"
                          },
                          {
                            "convention": "borrowed",
                            "default": "\"C\"",
                            "description": "Memory order C or F.",
                            "kind": "argument",
                            "name": "order",
                            "passingKind": "kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n    NDArray[DType.int8](3,2,4)\n    Returns an zero array with shape 3 x 2 x 4.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self, *shape: Int, *, random: Bool = 0, order: String = \"C\")",
                        "summary": "NDArray initialization for variadic shape."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "List of shape.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "borrowed",
                            "default": "0",
                            "description": "Set the values randomly.",
                            "kind": "argument",
                            "name": "random",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          },
                          {
                            "convention": "borrowed",
                            "default": "\"C\"",
                            "description": "Memory order C or F.",
                            "kind": "argument",
                            "name": "order",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n    NDArray[DType.float16](VariadicList[Int](3, 2, 4), random=True)\n    Returns an array with shape 3 x 2 x 4 and randomly values.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self, shape: List[Int], random: Bool = 0, order: String = \"C\")",
                        "summary": "NDArray initialization for list shape."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "Variadic List shape.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "VariadicList[Int]"
                          },
                          {
                            "convention": "borrowed",
                            "default": "0",
                            "description": "Set the values randomly.",
                            "kind": "argument",
                            "name": "random",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          },
                          {
                            "convention": "borrowed",
                            "default": "\"C\"",
                            "description": "Memory order C or F.",
                            "kind": "argument",
                            "name": "order",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n    NDArray[DType.float16](VariadicList[Int](3, 2, 4), random=True)\n    Returns an array with shape 3 x 2 x 4 and randomly values.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self, shape: VariadicList[Int], random: Bool = 0, order: String = \"C\")",
                        "summary": "NDArray initialization for variadic shape."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "Variadic shape.",
                            "kind": "argument",
                            "name": "*shape",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "borrowed",
                            "description": "Set all the values to this.",
                            "kind": "argument",
                            "name": "fill",
                            "passingKind": "kw",
                            "type": "SIMD[dtype, 1]"
                          },
                          {
                            "convention": "borrowed",
                            "default": "\"C\"",
                            "description": "Memory order C or F.",
                            "kind": "argument",
                            "name": "order",
                            "passingKind": "kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n    NDArray[DType.float16](VariadicList[Int](3, 2, 4), random=True)\n    Returns an array with shape 3 x 2 x 4 and randomly values.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self, *shape: Int, *, fill: SIMD[dtype, 1], order: String = \"C\")",
                        "summary": "NDArray initialization for variadic shape with option to fill."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "List of shape.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "Set all the values to this.",
                            "kind": "argument",
                            "name": "fill",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          },
                          {
                            "convention": "borrowed",
                            "default": "\"C\"",
                            "description": "Memory order C or F.",
                            "kind": "argument",
                            "name": "order",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n    NDArray[DType.float16](VariadicList[Int](3, 2, 4), random=True)\n    Returns an array with shape 3 x 2 x 4 and randomly values.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self, shape: List[Int], fill: SIMD[dtype, 1], order: String = \"C\")",
                        "summary": "NDArray initialization for variadic shape with option to fill."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "Variadic List of shape.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "VariadicList[Int]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "Set all the values to this.",
                            "kind": "argument",
                            "name": "fill",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          },
                          {
                            "convention": "borrowed",
                            "default": "\"C\"",
                            "description": "Memory order C or F.",
                            "kind": "argument",
                            "name": "order",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n    NDArray[DType.float16](VariadicList[Int](3, 2, 4), random=True)\n    Returns an array with shape 3 x 2 x 4 and randomly values.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self, shape: VariadicList[Int], fill: SIMD[dtype, 1], order: String = \"C\")",
                        "summary": "NDArray initialization for List of shape with option to fill."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "Variadic shape.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "NDArrayShape[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "default": "0",
                            "description": "Set all the values randomly.",
                            "kind": "argument",
                            "name": "random",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          },
                          {
                            "convention": "borrowed",
                            "default": "\"C\"",
                            "description": "Memory order C or F.",
                            "kind": "argument",
                            "name": "order",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n    NDArray[DType.float16](VariadicList[Int](3, 2, 4), random=True)\n    Returns an array with shape 3 x 2 x 4 and randomly values.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self, shape: NDArrayShape[dtype], random: Bool = 0, order: String = \"C\")",
                        "summary": "NDArray initialization for NDArrayShape."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "Variadic shape.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "NDArrayShape[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "Set all the the values to this.",
                            "kind": "argument",
                            "name": "fill",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          },
                          {
                            "convention": "borrowed",
                            "default": "\"C\"",
                            "description": "Memory order C or F.",
                            "kind": "argument",
                            "name": "order",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n    NDArray[DType.float16](VariadicList[Int](3, 2, 4), random=True)\n    Returns an array with shape 3 x 2 x 4 and randomly values.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self, shape: NDArrayShape[dtype], fill: SIMD[dtype, 1], order: String = \"C\")",
                        "summary": "NDArray initialization for NDArrayShape with option to fill."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "List of data.",
                            "kind": "argument",
                            "name": "data",
                            "passingKind": "pos_or_kw",
                            "type": "List[SIMD[dtype, 1]]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "List of shape.",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "borrowed",
                            "default": "\"C\"",
                            "description": "Memory order C or F.",
                            "kind": "argument",
                            "name": "order",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n    `NDArray[DType.int8](List[Int8](1,2,3,4,5,6), shape=List[Int](2,3))`\n    Returns an array with shape 3 x 2 with input values.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self, data: List[SIMD[dtype, 1]], shape: List[Int], order: String = \"C\")",
                        "summary": "NDArray initialization from list of data."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "ndim",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "offset",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "size",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "strides",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "coefficient",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "borrowed",
                            "default": "\"C\"",
                            "description": "",
                            "kind": "argument",
                            "name": "order",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self, ndim: Int, offset: Int, size: Int, shape: List[Int], strides: List[Int], coefficient: List[Int], order: String = \"C\")",
                        "summary": "Extremely specific NDArray initializer."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "data",
                            "passingKind": "pos_or_kw",
                            "type": "DTypePointer[dtype, 0]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "ndim",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "offset",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "shape",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "strides",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "coefficient",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "borrowed",
                            "default": "\"C\"",
                            "description": "",
                            "kind": "argument",
                            "name": "order",
                            "passingKind": "pos_or_kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self, data: DTypePointer[dtype, 0], ndim: Int, offset: Int, shape: List[Int], strides: List[Int], coefficient: List[Int], order: String = \"C\")",
                        "summary": "Extremely specific NDArray initializer."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__copyinit__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__copyinit__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__copyinit__(inout self: Self, other: Self)",
                        "summary": "Copy other into self."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__moveinit__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          },
                          {
                            "convention": "owned",
                            "description": "",
                            "kind": "argument",
                            "name": "existing",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__moveinit__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__moveinit__(inout self: Self, owned existing: Self)",
                        "summary": "Move other into self."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__del__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "owned",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__del__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__del__(owned self: Self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__bool__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__bool__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "__bool__(self: Self) -> Bool",
                        "summary": "If all true return true."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__getitem__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "idx",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n    `arr[1]` returns the second row of the array.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__getitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__getitem__(self: Self, idx: Int) -> Self",
                        "summary": "Retreive a slice of the array corrisponding to the index at the first dimension."
                      },
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "owned",
                            "description": "",
                            "kind": "argument",
                            "name": "*slices",
                            "passingKind": "pos_or_kw",
                            "type": "Slice"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n    `arr[1:3, 2:4]` returns the corresponding sliced array (2 x 2).",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__getitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__getitem__(self: Self, owned *slices: Slice) -> Self",
                        "summary": "Retreive slices of an array from variadic slices."
                      },
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "owned",
                            "description": "",
                            "kind": "argument",
                            "name": "slices",
                            "passingKind": "pos_or_kw",
                            "type": "List[Slice]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n    `arr[1:3, 2:4]` returns the corresponding sliced array (2 x 2).",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__getitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__getitem__(self: Self, owned slices: List[Slice]) -> Self",
                        "summary": "Retreive slices of an array from list of slices."
                      },
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "owned",
                            "description": "A series of either Slice or Int.",
                            "kind": "argument",
                            "name": "*slices",
                            "passingKind": "pos_or_kw",
                            "type": "Variant[Slice, Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "A decrease of dimensions may or may not happen when `__getitem__` is\ncalled on an ndarray. An ndarray of X-D array can become Y-D array after\n`__getitem__` where `Y <= X`.\n\nWhether the dimension decerases or not depends on:\n1. What types of arguments are passed into `__getitem__`.\n2. The number of arguments that are passed in `__getitem__`.\n\nPRINCIPAL: The number of dimensions to be decreased is determined by\nthe number of `Int` passed in `__getitem__`.\n\nFor example, `A` is a 10x10x10 ndarray (3-D). Then,\n\n- `A[1, 2, 3]` leads to a 0-D array (scalar), since there are 3 integers.\n- `A[1, 2]` leads to a 1-D array (vector), since there are 2 integers,\nso the dimension decreases by 2.\n- `A[1]` leads to a 2-D array (matrix), since there is 1 integer, so the\ndimension decreases by 1.\n\nThe number of dimensions will not decrease when Slice is passed in\n`__getitem__` or no argument is passed in for a certain dimension\n(it is an implicit slide and a slide of all items will be used).\n\nTake the same example `A` with 10x10x10 in shape. Then,\n\n- `A[1:4, 2:5, 3:6]`, leads to a 3-D array (no decrease in dimension),\nsince there are 3 slices.\n- `A[2:8]`, leads to a 3-D array (no decrease in dimension), since there\nare 1 explicit slice and 2 implicit slices.\n\nWhen there is a mixture of int and slices passed into `__getitem__`,\nthe number of integers will be the number of dimensions to be decreased.\nExample,\n\n- `A[1:4, 2, 2]`, leads to a 1-D array (vector), since there are 2\nintegers, so the dimension decreases by 2.\n\nNote that, even though a slice contains one row, it does not reduce the\ndimensions. Example,\n\n- `A[1:2, 2:3, 3:4]`, leads to a 3-D array (no decrease in dimension),\nsince there are 3 slices.\n\nNote that, when the number of integers equals to the number of\ndimensions, the final outcome is an 0-D array instead of a number.\nThe user has to upack the 0-D array with the method`A.item(0)` to get the\ncorresponding number.\nThis behavior is different from numpy where the latter returns a number.\n\nMore examples for 1-D, 2-D, and 3-D arrays.\n\n```console\nA is a matrix\n[[      -128    -95     65      -11     ]\n[      8       -72     -116    45      ]\n[      45      111     -30     4       ]\n[      84      -120    -115    7       ]]\n2-D array  Shape: [4, 4]  DType: int8\n\nA[0]\n[       -128    -95     65      -11     ]\n1-D array  Shape: [4]  DType: int8\n\nA[0, 1]\n-95\n0-D array  Shape: [0]  DType: int8\n\nA[Slice(1,3)]\n[[      8       -72     -116    45      ]\n[      45      111     -30     4       ]]\n2-D array  Shape: [2, 4]  DType: int8\n\nA[1, Slice(2,4)]\n[       -116    45      ]\n1-D array  Shape: [2]  DType: int8\n\nA[Slice(1,3), Slice(1,3)]\n[[      -72     -116    ]\n[      111     -30     ]]\n2-D array  Shape: [2, 2]  DType: int8\n\nA.item(0,1) as Scalar\n-95\n\n==============================\nA is a vector\n[       43      -127    -30     -111    ]\n1-D array  Shape: [4]  DType: int8\n\nA[0]\n43\n0-D array  Shape: [0]  DType: int8\n\nA[Slice(1,3)]\n[       -127    -30     ]\n1-D array  Shape: [2]  DType: int8\n\nA.item(0) as Scalar\n43\n\n==============================\nA is a 3darray\n[[[     -22     47      22      110     ]\n[     88      6       -105    39      ]\n[     -22     51      105     67      ]\n[     -61     -116    60      -44     ]]\n[[     33      65      125     -35     ]\n[     -65     123     57      64      ]\n[     38      -110    33      98      ]\n[     -59     -17     68      -6      ]]\n[[     -68     -58     -37     -86     ]\n[     -4      101     104     -113    ]\n[     103     1       4       -47     ]\n[     124     -2      -60     -105    ]]\n[[     114     -110    0       -30     ]\n[     -58     105     7       -10     ]\n[     112     -116    66      69      ]\n[     83      -96     -124    48      ]]]\n3-D array  Shape: [4, 4, 4]  DType: int8\n\nA[0]\n[[      -22     47      22      110     ]\n[      88      6       -105    39      ]\n[      -22     51      105     67      ]\n[      -61     -116    60      -44     ]]\n2-D array  Shape: [4, 4]  DType: int8\n\nA[0, 1]\n[       88      6       -105    39      ]\n1-D array  Shape: [4]  DType: int8\n\nA[0, 1, 2]\n-105\n0-D array  Shape: [0]  DType: int8\n\nA[Slice(1,3)]\n[[[     33      65      125     -35     ]\n[     -65     123     57      64      ]\n[     38      -110    33      98      ]\n[     -59     -17     68      -6      ]]\n[[     -68     -58     -37     -86     ]\n[     -4      101     104     -113    ]\n[     103     1       4       -47     ]\n[     124     -2      -60     -105    ]]]\n3-D array  Shape: [2, 4, 4]  DType: int8\n\nA[1, Slice(2,4)]\n[[      38      -110    33      98      ]\n[      -59     -17     68      -6      ]]\n2-D array  Shape: [2, 4]  DType: int8\n\nA[Slice(1,3), Slice(1,3), 2]\n[[      57      33      ]\n[      104     4       ]]\n2-D array  Shape: [2, 2]  DType: int8\n\nA.item(0,1,2) as Scalar\n-105\n```\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__getitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "An ndarray with a smaller or equal dimension of the original one.",
                        "signature": "__getitem__(self: Self, owned *slices: Variant[Slice, Int]) -> Self",
                        "summary": "Get items by a series of either slices or integers."
                      },
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "List[Int].",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "It always gets the first dimension.\n\nExample:\n```console\n> var A = nm.NDArray[nm.i8](3,random=True)\n> print(A)\n[       14      97      -59     ]\n1-D array  Shape: [3]  DType: int8\n>\n> print(A[List[Int](2,1,0,1,2)])\n[       -59     97      14      97      -59     ]\n1-D array  Shape: [5]  DType: int8\n>\n> var B = nm.NDArray[nm.i8](3, 3,random=True)\n> print(B)\n[[      -4      112     -94     ]\n[      -48     -40     66      ]\n[      -2      -94     -18     ]]\n2-D array  Shape: [3, 3]  DType: int8\n>\n> print(B[List[Int](2,1,0,1,2)])\n[[      -2      -94     -18     ]\n[      -48     -40     66      ]\n[      -4      112     -94     ]\n[      -48     -40     66      ]\n[      -2      -94     -18     ]]\n2-D array  Shape: [5, 3]  DType: int8\n>\n> var C = nm.NDArray[nm.i8](3, 3, 3,random=True)\n> print(C)\n[[[     -126    -88     -79     ]\n[     14      78      99      ]\n[     -32     3       -42     ]]\n[[     56      -45     -71     ]\n[     -13     18      -102    ]\n[     4       83      26      ]]\n[[     61      -73     86      ]\n[     -125    -84     66      ]\n[     32      21      53      ]]]\n3-D array  Shape: [3, 3, 3]  DType: int8\n>\n> print(C[List[Int](2,1,0,1,2)])\n[[[     61      -73     86      ]\n[     -125    -84     66      ]\n[     32      21      53      ]]\n[[     56      -45     -71     ]\n[     -13     18      -102    ]\n[     4       83      26      ]]\n[[     -126    -88     -79     ]\n[     14      78      99      ]\n[     -32     3       -42     ]]\n[[     56      -45     -71     ]\n[     -13     18      -102    ]\n[     4       83      26      ]]\n[[     61      -73     86      ]\n[     -125    -84     66      ]\n[     32      21      53      ]]]\n3-D array  Shape: [5, 3, 3]  DType: int8\n```\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__getitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "NDArray with items from the list of indices.",
                        "signature": "__getitem__(self: Self, index: List[Int]) -> Self",
                        "summary": "Get items of array from a list of indices."
                      },
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[index]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Refer to `__getitem__(self, index: List[Int])`.\n\nExample:\n```console\n> var X = nm.NDArray[nm.i8](3,random=True)\n> print(X)\n[       32      21      53      ]\n1-D array  Shape: [3]  DType: int8\n> print(X.argsort())\n[       1       0       2       ]\n1-D array  Shape: [3]  DType: index\n> print(X[X.argsort()])\n[       21      32      53      ]\n1-D array  Shape: [3]  DType: int8\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__getitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__getitem__(self: Self, index: NDArray[index]) -> Self",
                        "summary": "Get items of array from an array of indices."
                      },
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "NDArray with Dtype.bool.",
                            "kind": "argument",
                            "name": "mask",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[bool]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n    ```\n    var A = numojo.core.NDArray[numojo.i16](6, random=True)\n    var mask = A > 0\n    print(A)\n    print(mask)\n    print(A[mask])\n    ```\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__getitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "NDArray with items from the mask.",
                        "signature": "__getitem__(self: Self, mask: NDArray[bool]) -> Self",
                        "summary": "Get items of array corrisponding to a mask."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__setitem__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__setitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__setitem__(inout self: Self, index: Int, val: SIMD[dtype, 1])",
                        "summary": "Set the value of a single index."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "*index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__setitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__setitem__(inout self: Self, *index: Int, *, val: SIMD[dtype, 1])",
                        "summary": "Set the value at the index list."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "List[Int]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__setitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__setitem__(inout self: Self, index: List[Int], val: SIMD[dtype, 1])",
                        "summary": "Set the value at the index list."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "VariadicList[Int]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__setitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__setitem__(inout self: Self, index: VariadicList[Int], val: SIMD[dtype, 1])",
                        "summary": "Set the value at the index corisponding to the varaidic list."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "mask",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[bool]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "value",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__setitem__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__setitem__(inout self: Self, mask: NDArray[bool], value: Self)",
                        "summary": "Set the value of the array at the indices where the mask is true."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__neg__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "For bolean use `__invert__`(~)",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__neg__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__neg__(self: Self) -> Self",
                        "summary": "Unary negative returens self unless boolean type."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__pos__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__pos__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__pos__(self: Self) -> Self",
                        "summary": "Unary positve returens self unless boolean type."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__invert__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__invert__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__invert__(self: Self) -> Self",
                        "summary": "Elementwise inverse (~ or not), only for bools and integral types."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__lt__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__lt__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__lt__(self: Self, other: SIMD[dtype, 1]) -> NDArray[bool]",
                        "summary": "Itemwise less than."
                      },
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__lt__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__lt__(self: Self, other: Self) -> NDArray[bool]",
                        "summary": "Itemwise less than between scalar and Array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__le__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__le__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__le__(self: Self, other: SIMD[dtype, 1]) -> NDArray[bool]",
                        "summary": "Itemwise less than or equal to."
                      },
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__le__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__le__(self: Self, other: Self) -> NDArray[bool]",
                        "summary": "Itemwise less than or equal to between scalar and Array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__eq__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__eq__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__eq__(self: Self, other: Self) -> NDArray[bool]",
                        "summary": "Itemwise equivelence."
                      },
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__eq__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__eq__(self: Self, other: SIMD[dtype, 1]) -> NDArray[bool]",
                        "summary": "Itemwise equivelence between scalar and Array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__ne__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ne__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__ne__(self: Self, other: SIMD[dtype, 1]) -> NDArray[bool]",
                        "summary": "Itemwise nonequivelence."
                      },
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ne__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__ne__(self: Self, other: Self) -> NDArray[bool]",
                        "summary": "Itemwise nonequivelence between scalar and Array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__gt__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__gt__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__gt__(self: Self, other: SIMD[dtype, 1]) -> NDArray[bool]",
                        "summary": "Itemwise greater than."
                      },
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__gt__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__gt__(self: Self, other: Self) -> NDArray[bool]",
                        "summary": "Itemwise greater than between scalar and Array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__ge__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ge__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__ge__(self: Self, other: SIMD[dtype, 1]) -> NDArray[bool]",
                        "summary": "Itemwise greater than or equal to."
                      },
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ge__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "__ge__(self: Self, other: Self) -> NDArray[bool]",
                        "summary": "Itemwise less than or equal to between scalar and Array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__add__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__add__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__add__(inout self: Self, other: SIMD[dtype, 1]) -> Self",
                        "summary": "Enables `array + scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__add__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__add__(inout self: Self, other: Self) -> Self",
                        "summary": "Enables `array + array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__sub__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__sub__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__sub__(self: Self, other: SIMD[dtype, 1]) -> Self",
                        "summary": "Enables `array - scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__sub__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__sub__(self: Self, other: Self) -> Self",
                        "summary": "Enables `array - array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__mul__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__mul__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__mul__(self: Self, other: SIMD[dtype, 1]) -> Self",
                        "summary": "Enables `array * scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__mul__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__mul__(self: Self, other: Self) -> Self",
                        "summary": "Enables `array * array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__matmul__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__matmul__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__matmul__(self: Self, other: Self) -> Self",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__truediv__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__truediv__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__truediv__(self: Self, other: SIMD[dtype, 1]) -> Self",
                        "summary": "Enables `array / scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__truediv__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__truediv__(self: Self, other: Self) -> Self",
                        "summary": "Enables `array / array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__floordiv__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__floordiv__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__floordiv__(self: Self, other: SIMD[dtype, 1]) -> Self",
                        "summary": "Enables `array // scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__floordiv__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__floordiv__(self: Self, other: Self) -> Self",
                        "summary": "Enables `array // array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__mod__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__mod__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__mod__(inout self: Self, other: SIMD[dtype, 1]) -> Self",
                        "summary": "Enables `array % scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__mod__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__mod__(inout self: Self, other: Self) -> Self",
                        "summary": "Enables `array % array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__pow__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "p",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__pow__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__pow__(self: Self, p: Int) -> Self",
                        "summary": ""
                      },
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "p",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__pow__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__pow__(self: Self, p: Self) -> Self",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__radd__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "rhs",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__radd__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__radd__(inout self: Self, rhs: SIMD[dtype, 1]) -> Self",
                        "summary": "Enables `scalar + array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__rsub__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "s",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__rsub__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__rsub__(self: Self, s: SIMD[dtype, 1]) -> Self",
                        "summary": "Enables `scalar - array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__rmul__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "s",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__rmul__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__rmul__(self: Self, s: SIMD[dtype, 1]) -> Self",
                        "summary": "Enables `scalar * array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__rtruediv__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "s",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__rtruediv__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__rtruediv__(self: Self, s: SIMD[dtype, 1]) -> Self",
                        "summary": "Enables `scalar / array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__rfloordiv__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "s",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__rfloordiv__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__rfloordiv__(self: Self, s: SIMD[dtype, 1]) -> Self",
                        "summary": "Enables `scalar // array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__rmod__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__rmod__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "__rmod__(inout self: Self, other: SIMD[dtype, 1]) -> Self",
                        "summary": "Enables `scalar % array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__iadd__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__iadd__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__iadd__(inout self: Self, other: SIMD[dtype, 1])",
                        "summary": "Enables `array += scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__iadd__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__iadd__(inout self: Self, other: Self)",
                        "summary": "Enables `array *= array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__isub__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "s",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__isub__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__isub__(inout self: Self, s: SIMD[dtype, 1])",
                        "summary": "Enables `array -= scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "s",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__isub__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__isub__(inout self: Self, s: Self)",
                        "summary": "Enables `array -= array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__imul__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "s",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__imul__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__imul__(inout self: Self, s: SIMD[dtype, 1])",
                        "summary": "Enables `array *= scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "s",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__imul__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__imul__(inout self: Self, s: Self)",
                        "summary": "Enables `array *= array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__itruediv__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "s",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__itruediv__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__itruediv__(inout self: Self, s: SIMD[dtype, 1])",
                        "summary": "Enables `array /= scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__itruediv__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__itruediv__(inout self: Self, other: Self)",
                        "summary": "Enables `array /= array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__ifloordiv__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "s",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ifloordiv__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__ifloordiv__(inout self: Self, s: SIMD[dtype, 1])",
                        "summary": "Enables `array //= scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ifloordiv__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__ifloordiv__(inout self: Self, other: Self)",
                        "summary": "Enables `array //= array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__imod__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__imod__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__imod__(inout self: Self, other: SIMD[dtype, 1])",
                        "summary": "Enables `array %= scalar`."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__imod__",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__imod__(inout self: Self, other: Self)",
                        "summary": "Enables `array %= array`."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "__ipow__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "p",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__ipow__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__ipow__(inout self: Self, p: Int)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "get_scalar",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```console\n> Array.get_scalar(15)\n```\nreturns the item of index 15 from the array's data buffer.\n\nNot that it is different from `item()` as `get_scalar` does not checked\nagainst C-order or F-order.\n```console\n> # A is a 3x3 matrix, F-order (column-major)\n> A.get_scalar(3)  # Row 0, Col 1\n> A.item(3)  # Row 1, Col 0\n```",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "get_scalar",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "get_scalar(self: Self, index: Int) -> SIMD[dtype, 1]",
                        "summary": "Linearly retreive a value from the underlying Pointer."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "vdot",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "vdot",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "",
                        "signature": "vdot(self: Self, other: Self) -> SIMD[dtype, 1]",
                        "summary": "Inner product of two vectors."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "mdot",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mdot",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "mdot(self: Self, other: Self) -> Self",
                        "summary": "Dot product of two matrix. Matrix A: M * N. Matrix B: N * L."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "row",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "id",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "row",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "row(self: Self, id: Int) -> Self",
                        "summary": "Get the ith row of the matrix."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "col",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "id",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "col",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "col(self: Self, id: Int) -> Self",
                        "summary": "Get the ith column of the matrix."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "rdot",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "other",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "rdot",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "rdot(self: Self, other: Self) -> Self",
                        "summary": "Dot product of two matrix. Matrix A: M * N. Matrix B: N * L."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "size",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "size",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "size(self: Self) -> Int",
                        "summary": "Function to retreive size."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "num_elements",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "num_elements",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "num_elements(self: Self) -> Int",
                        "summary": "Function to retreive size (compatability)."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "shape",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "To get a list of shape call this then list",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "shape",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "NDArrayShape[int32]",
                        "returnsDoc": "",
                        "signature": "shape(self: Self) -> NDArrayShape[int32]",
                        "summary": "Get the shape as an NDArray Shape."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "load",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "load",
                        "parameters": [
                          {
                            "default": "1",
                            "description": "",
                            "kind": "parameter",
                            "name": "width",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, $0]",
                        "returnsDoc": "",
                        "signature": "load[width: Int = 1](self: Self, index: Int) -> SIMD[dtype, $0]",
                        "summary": "Loads a SIMD element of size `width` at the given index `index`."
                      },
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "*index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "load",
                        "parameters": [
                          {
                            "default": "1",
                            "description": "",
                            "kind": "parameter",
                            "name": "width",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, $0]",
                        "returnsDoc": "",
                        "signature": "load[width: Int = 1](self: Self, *index: Int) -> SIMD[dtype, $0]",
                        "summary": "Loads a SIMD element of size `width` at given variadic indices argument."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "store",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, width]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "store",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "width",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "store[width: Int](inout self: Self, index: Int, val: SIMD[dtype, width])",
                        "summary": "Stores the SIMD element of size `width` at index `index`."
                      },
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "*index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "kw",
                            "type": "SIMD[dtype, width]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "store",
                        "parameters": [
                          {
                            "default": "1",
                            "description": "",
                            "kind": "parameter",
                            "name": "width",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "store[width: Int = 1](inout self: Self, *index: Int, *, val: SIMD[dtype, width])",
                        "summary": "Stores the SIMD element of size `width` at the given variadic indices argument."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "all",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "all",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "all(self: Self) -> Bool",
                        "summary": "If all true return true."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "any",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "any",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Bool",
                        "returnsDoc": "",
                        "signature": "any(self: Self) -> Bool",
                        "summary": "True if any true."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "argmax",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "argmax",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "argmax(self: Self) -> Int",
                        "summary": "Get location in pointer of max value."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "argmin",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "argmin",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "argmin(self: Self) -> Int",
                        "summary": "Get location in pointer of min value."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "argsort",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "See `numojo.core.sort.argsort()`.\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "argsort",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[index]",
                        "returnsDoc": "The indices of the sorted NDArray.",
                        "signature": "argsort(self: Self) -> NDArray[index]",
                        "summary": "Sort the NDArray and return the sorted indices."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "astype",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "astype",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "type",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "",
                        "signature": "astype[type: DType](inout self: Self) -> NDArray[$0]",
                        "summary": "Convert type of array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "cumprod",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cumprod",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "The cumulative product of the array as a SIMD Value of `dtype`.",
                        "signature": "cumprod(self: Self) -> SIMD[dtype, 1]",
                        "summary": "Cumulative product of a array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "cumsum",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cumsum",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "The cumulative sum of the array as a SIMD Value of `dtype`.",
                        "signature": "cumsum(self: Self) -> SIMD[dtype, 1]",
                        "summary": "Cumulative Sum of a array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "diagonal",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "diagonal",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "diagonal(self: Self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "fill",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "val",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "fill",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "fill(inout self: Self, val: SIMD[dtype, 1]) -> Self",
                        "summary": "Fill all items of array with value."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "flatten",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "default": "0",
                            "description": "",
                            "kind": "argument",
                            "name": "inplace",
                            "passingKind": "pos_or_kw",
                            "type": "Bool"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "flatten",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Optional[NDArray[dtype]]",
                        "returnsDoc": "",
                        "signature": "flatten(inout self: Self, inplace: Bool = 0) -> Optional[NDArray[dtype]]",
                        "summary": "Convert shape of array to one dimensional."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "item",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "The coordinates of the item.",
                            "kind": "argument",
                            "name": "*index",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "If one index is given, get the i-th item of the array.\nIt first scans over the first row, even it is a colume-major array.\n\nIf more than one index is given, the length of the indices must match\nthe number of dimensions of the array.\n\nExample:\n```console\n> var A = nm.NDArray[dtype](3, 3, random=True, order=\"F\")\n> print(A)\n[[      14      -4      -48     ]\n[      97      112     -40     ]\n[      -59     -94     66      ]]\n2-D array  Shape: [3, 3]  DType: int8\n\n> for i in A:\n>     print(i)  # Return rows\n[       14      -4      -48     ]\n1-D array  Shape: [3]  DType: int8\n[       97      112     -40     ]\n1-D array  Shape: [3]  DType: int8\n[       -59     -94     66      ]\n1-D array  Shape: [3]  DType: int8\n\n> for i in range(A.size()):\n>    print(A.item(i))  # Return 0-d arrays\nc stride Stride: [3, 1]\n14\nc stride Stride: [3, 1]\n-4\nc stride Stride: [3, 1]\n-48\nc stride Stride: [3, 1]\n97\nc stride Stride: [3, 1]\n112\nc stride Stride: [3, 1]\n-40\nc stride Stride: [3, 1]\n-59\nc stride Stride: [3, 1]\n-94\nc stride Stride: [3, 1]\n66\n==============================\n```\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "item",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "A scalar matching the dtype of the array.",
                        "signature": "item(self: Self, *index: Int) -> SIMD[dtype, 1]",
                        "summary": "Return the scalar at the coordinates."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "max",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "default": "0",
                            "description": "",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "max",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "max(self: Self, axis: Int = 0) -> Self",
                        "summary": "Max on axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "min",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "default": "0",
                            "description": "",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "min",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "min(self: Self, axis: Int = 0) -> Self",
                        "summary": "Min on axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "mean",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mean",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "mean(self: Self, axis: Int) -> Self",
                        "summary": "Mean of array elements over a given axis. Args:     array: NDArray.     axis: The axis along which the mean is performed. Returns:     An NDArray."
                      },
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mean",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[dtype, 1]",
                        "returnsDoc": "The cumulative mean of the array as a SIMD Value of `dtype`.",
                        "signature": "mean(self: Self) -> SIMD[dtype, 1]",
                        "summary": "Cumulative mean of a array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "prod",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "prod",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "prod(self: Self, axis: Int) -> Self",
                        "summary": "Product of array elements over a given axis. Args:     array: NDArray.     axis: The axis along which the product is performed. Returns:     An NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "sort",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sort",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "sort(self: Self) -> Self",
                        "summary": "Sort the array using quickstort."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "sum",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sum",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Self",
                        "returnsDoc": "",
                        "signature": "sum(self: Self, axis: Int) -> Self",
                        "summary": "Sum of array elements over a given axis. Args:     axis: The axis along which the sum is performed. Returns:     An NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "reshape",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "Variadic list of shape.",
                            "kind": "argument",
                            "name": "*Shape",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "borrowed",
                            "default": "\"C\"",
                            "description": "Order of the array - Row major `C` or Column major `F`.",
                            "kind": "argument",
                            "name": "order",
                            "passingKind": "kw",
                            "type": "String"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "reshape",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "reshape(inout self: Self, *Shape: Int, *, order: String = \"C\")",
                        "summary": "Reshapes the NDArray to given Shape."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "unsafe_ptr",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "unsafe_ptr",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "DTypePointer[dtype, 0]",
                        "returnsDoc": "",
                        "signature": "unsafe_ptr(self: Self) -> DTypePointer[dtype, 0]",
                        "summary": "Retreive pointer without taking ownership."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "to_numpy",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "to_numpy",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "PythonObject",
                        "returnsDoc": "",
                        "signature": "to_numpy(self: Self) -> PythonObject",
                        "summary": "Convert to a numpy array."
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "NDArray",
                "parameters": [
                  {
                    "default": "float32",
                    "description": "Type of item in NDArray.",
                    "kind": "parameter",
                    "name": "dtype",
                    "passingKind": "pos_or_kw",
                    "type": "DType"
                  }
                ],
                "parentTraits": [
                  "Absable",
                  "AnyType",
                  "CollectionElement",
                  "Copyable",
                  "Movable",
                  "Representable",
                  "Sized",
                  "Stringable"
                ],
                "summary": "The N-dimensional array (NDArray)."
              }
            ],
            "summary": "Implements N-Dimensional Array",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "bool_to_numeric",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "The boolean NDArray to convert.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[bool]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "bool_to_numeric",
                    "parameters": [
                      {
                        "description": "The data type of the output NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The converted NDArray of type `dtype` with 1s (True) and 0s (False).",
                    "signature": "bool_to_numeric[dtype: DType](array: NDArray[bool]) -> NDArray[$0]",
                    "summary": "Convert a boolean NDArray to a numeric NDArray."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "to_numpy",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "The NDArray to convert.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "Example:\n```console \nvar arr = NDArray[DType.float32](3, 3, 3)\nvar np_arr = to_numpy(arr) \nvar np_arr1 = arr.to_numpy() \n```\n",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "to_numpy",
                    "parameters": [
                      {
                        "description": "The data type of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "PythonObject",
                    "returnsDoc": "The converted numpy array.",
                    "signature": "to_numpy[dtype: DType](array: NDArray[dtype]) -> PythonObject",
                    "summary": "Convert a NDArray to a numpy array."
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "ndarray_utils",
            "structs": [],
            "summary": "Implements N-DIMENSIONAL ARRAY UTILITY FUNCTIONS",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "rand",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "The shape of the NDArray.",
                        "kind": "argument",
                        "name": "*shape",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "Example:\n    ```py\n    var arr = numojo.core.random.rand[numojo.i16](3,2,4)\n    print(arr)\n    ```\n",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "rand",
                    "parameters": [
                      {
                        "description": "The data type of the NDArray elements.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The generated NDArray of type `dtype` filled with random values.",
                    "signature": "rand[dtype: DType](*shape: Int) -> NDArray[$0]",
                    "summary": "Generate a random NDArray of the given shape and dtype."
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "random",
            "structs": [],
            "summary": "Random values array generation.",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "bubble_sort",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "An NDArray.",
                        "kind": "argument",
                        "name": "ndarray",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "Example:\n    ```py\n    var arr = numojo.core.random.rand[numojo.i16](100)\n    var sorted_arr = numojo.core.sort.bubble_sort(arr)\n    print(sorted_arr)\n    ```\n",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "bubble_sort",
                    "parameters": [
                      {
                        "description": "The input element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The sorted NDArray.",
                    "signature": "bubble_sort[dtype: DType](ndarray: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Bubble sort the NDArray. Average complexity: O(n^2) comparisons, O(n^2) swaps. Worst-case complexity: O(n^2) comparisons, O(n^2) swaps. Worst-case space complexity: O(n)."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "quick_sort_inplace",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "inout",
                        "description": "An NDArray.",
                        "kind": "argument",
                        "name": "ndarray",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "Left index of the partition.",
                        "kind": "argument",
                        "name": "left",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      },
                      {
                        "convention": "borrowed",
                        "description": "Right index of the partition.",
                        "kind": "argument",
                        "name": "right",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "quick_sort_inplace",
                    "parameters": [
                      {
                        "description": "The input element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": null,
                    "returnsDoc": "",
                    "signature": "quick_sort_inplace[dtype: DType](inout ndarray: NDArray[dtype], left: Int, right: Int)",
                    "summary": "Quick sort (in-place) the NDArray."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "quick_sort",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "An NDArray.",
                        "kind": "argument",
                        "name": "ndarray",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "Example:\n    ```py\n    var arr = numojo.core.random.rand[numojo.i16](100)\n    var sorted_arr = numojo.core.sort.quick_sort(arr)\n    print(sorted_arr)\n    ```\n",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "quick_sort",
                    "parameters": [
                      {
                        "description": "The input element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The sorted NDArray.",
                    "signature": "quick_sort[dtype: DType](ndarray: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Quick sort the NDArray. Adopt in-place partition. Average complexity: O(nlogn). Worst-case complexity: O(n^2). Worst-case space complexity: O(n). Unstable."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "binary_sort",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[in_dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "Example:\n    ```py\n    var arr = numojo.core.random.rand[numojo.i16](100)\n    var sorted_arr = numojo.core.sort.binary_sort(arr)\n    print(sorted_arr)\n    ```\n",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "binary_sort",
                    "parameters": [
                      {
                        "description": "The input element type.",
                        "kind": "parameter",
                        "name": "in_dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "float64",
                        "description": "The output element type.",
                        "kind": "parameter",
                        "name": "out_dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$1]",
                    "returnsDoc": "The sorted NDArray of type `out_dtype`.",
                    "signature": "binary_sort[in_dtype: DType, out_dtype: DType = float64](array: NDArray[in_dtype]) -> NDArray[$1]",
                    "summary": "Binary sorting of NDArray."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "argsort_inplace",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "inout",
                        "description": "An NDArray.",
                        "kind": "argument",
                        "name": "ndarray",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "inout",
                        "description": "An NDArray of the indices.",
                        "kind": "argument",
                        "name": "idx_array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[index]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "Left index of the partition.",
                        "kind": "argument",
                        "name": "left",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      },
                      {
                        "convention": "borrowed",
                        "description": "Right index of the partition.",
                        "kind": "argument",
                        "name": "right",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "argsort_inplace",
                    "parameters": [
                      {
                        "description": "The input element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": null,
                    "returnsDoc": "",
                    "signature": "argsort_inplace[dtype: DType](inout ndarray: NDArray[dtype], inout idx_array: NDArray[index], left: Int, right: Int)",
                    "summary": "Conduct Argsort (in-place) based on the NDArray using quick sort."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "argsort",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "An NDArray.",
                        "kind": "argument",
                        "name": "ndarray",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "Example:\n    ```py\n    var arr = numojo.core.random.rand[numojo.i16](100)\n    var sorted_arr = numojo.core.sort.argsort(arr)\n    print(sorted_arr)\n    ```\n",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "argsort",
                    "parameters": [
                      {
                        "description": "The input element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[index]",
                    "returnsDoc": "The indices of the sorted NDArray.",
                    "signature": "argsort[dtype: DType](ndarray: NDArray[dtype]) -> NDArray[index]",
                    "summary": "Argsort of the NDArray using quick sort algorithm."
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "sort",
            "structs": [],
            "summary": "Implements sort functions",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "is_inttype",
                "overloads": [
                  {
                    "args": [],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "is_inttype",
                    "parameters": [
                      {
                        "description": "DType.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": "Bool",
                    "returnsDoc": "Bool: True if the given dtype is an integer type, False otherwise.",
                    "signature": "is_inttype[dtype: DType]() -> Bool",
                    "summary": "Check if the given dtype is an integer type at compile time."
                  },
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "DType.",
                        "kind": "argument",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "is_inttype",
                    "parameters": [],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": "Bool",
                    "returnsDoc": "Bool: True if the given dtype is an integer type, False otherwise.",
                    "signature": "is_inttype(dtype: DType) -> Bool",
                    "summary": "Check if the given dtype is an integer type at run time."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "is_floattype",
                "overloads": [
                  {
                    "args": [],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "is_floattype",
                    "parameters": [
                      {
                        "description": "DType.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": "Bool",
                    "returnsDoc": "Bool: True if the given dtype is a floating point type, False otherwise.",
                    "signature": "is_floattype[dtype: DType]() -> Bool",
                    "summary": "Check if the given dtype is a floating point type at compile time."
                  },
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "DType.",
                        "kind": "argument",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "is_floattype",
                    "parameters": [],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": "Bool",
                    "returnsDoc": "Bool: True if the given dtype is a floating point type, False otherwise.",
                    "signature": "is_floattype(dtype: DType) -> Bool",
                    "summary": "Check if the given dtype is a floating point type at run time."
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "utility_funcs",
            "structs": [],
            "summary": "Type related utility functions.",
            "traits": []
          }
        ],
        "name": "core",
        "packages": [],
        "summary": ""
      },
      {
        "description": "",
        "kind": "package",
        "modules": [
          {
            "aliases": [],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "__init__",
            "structs": [],
            "summary": "",
            "traits": []
          },
          {
            "aliases": [
              {
                "deprecated": "",
                "description": "",
                "kind": "alias",
                "name": "ln",
                "summary": "Natural Log equivelent to log",
                "value": "log[stdlib::builtin::dtype::DType,numojo::traits::backend::Backend]"
              }
            ],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "add",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array1",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array2",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "Both arrays must have the same shapes.",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "add",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise sum of `array1` and`array2`.",
                    "signature": "add[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Perform addition on two arrays."
                  },
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "scalar",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "add",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise sum of `array1` and`array2`.",
                    "signature": "add[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype], scalar: SIMD[dtype, 1]) -> NDArray[$0]",
                    "summary": "Perform addition on between an array and a scalar."
                  },
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "scalar",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "add",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise sum of `array1` and`array2`.",
                    "signature": "add[dtype: DType, backend: Backend = Vectorized](scalar: SIMD[dtype, 1], array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Perform addition on between an array and a scalar."
                  },
                  {
                    "args": [
                      {
                        "convention": "owned",
                        "description": "A list of arrays or Scalars to be added.",
                        "kind": "argument",
                        "name": "*values",
                        "passingKind": "pos_or_kw",
                        "type": "Variant[NDArray[dtype], SIMD[dtype, 1]]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "add",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise sum of `array1` and`array2`.",
                    "signature": "add[dtype: DType, backend: Backend = Vectorized](owned *values: Variant[NDArray[dtype], SIMD[dtype, 1]]) -> NDArray[$0]",
                    "summary": "Perform addition on a list of arrays and a scalars."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "sub",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array1",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array2",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "Both arrays must have the same shapes.",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "sub",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise difference of `array1` and`array2`.",
                    "signature": "sub[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Perform subtraction on two arrays."
                  },
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "scalar",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "sub",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise difference of `array1` and`array2`.",
                    "signature": "sub[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype], scalar: SIMD[dtype, 1]) -> NDArray[$0]",
                    "summary": "Perform subtraction on between an array and a scalar."
                  },
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "scalar",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "sub",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise difference of `array1` and`array2`.",
                    "signature": "sub[dtype: DType, backend: Backend = Vectorized](scalar: SIMD[dtype, 1], array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Perform subtraction on between an array and a scalar."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "diff",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A array.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[in_dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "The order of the difference.",
                        "kind": "argument",
                        "name": "n",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "diff",
                    "parameters": [
                      {
                        "description": "Input data type.",
                        "kind": "parameter",
                        "name": "in_dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "$0",
                        "description": "Output data type, defaults to float32.",
                        "kind": "parameter",
                        "name": "out_dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$1]",
                    "returnsDoc": "The n-th order difference of the input array.",
                    "signature": "diff[in_dtype: DType, out_dtype: DType = $0](array: NDArray[in_dtype], n: Int) -> NDArray[$1]",
                    "summary": "Compute the n-th order difference of the input array."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "copysign",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array1",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array2",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "Both arrays must have the same shapes.",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "copysign",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The second NDArray multipied by the sign of the first NDArray.",
                    "signature": "copysign[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Copy the sign of the first NDArray and apply it to the second NDArray."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "mod",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array1",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array2",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "Both arrays must have the same shapes.",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "mod",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray equal to array1 % array2.",
                    "signature": "mod[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Elementwise modulo of array1 and array2."
                  },
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "scalar",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "mod",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise difference of `array1` and`array2`.",
                    "signature": "mod[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype], scalar: SIMD[dtype, 1]) -> NDArray[$0]",
                    "summary": "Perform subtraction on between an array and a scalar."
                  },
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "scalar",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "mod",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise difference of `array1` and`array2`.",
                    "signature": "mod[dtype: DType, backend: Backend = Vectorized](scalar: SIMD[dtype, 1], array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Perform subtraction on between an array and a scalar."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "mul",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array1",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array2",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "Both arrays must have the same shapes.",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "mul",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray equal to array1*array2.",
                    "signature": "mul[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Elementwise product of array1 and array2."
                  },
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "scalar",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "mul",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise product of `array1` and`array2`.",
                    "signature": "mul[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype], scalar: SIMD[dtype, 1]) -> NDArray[$0]",
                    "summary": "Perform multiplication on between an array and a scalar."
                  },
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "scalar",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "mul",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise product of `array1` and`array2`.",
                    "signature": "mul[dtype: DType, backend: Backend = Vectorized](scalar: SIMD[dtype, 1], array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Perform multiplication on between an array and a scalar."
                  },
                  {
                    "args": [
                      {
                        "convention": "owned",
                        "description": "A list of arrays or Scalars to be added.",
                        "kind": "argument",
                        "name": "*values",
                        "passingKind": "pos_or_kw",
                        "type": "Variant[NDArray[dtype], SIMD[dtype, 1]]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "mul",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise product of `array1` and`array2`.",
                    "signature": "mul[dtype: DType, backend: Backend = Vectorized](owned *values: Variant[NDArray[dtype], SIMD[dtype, 1]]) -> NDArray[$0]",
                    "summary": "Perform multiplication on a list of arrays an arrays and a scalars."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "div",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array1",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array2",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "Both arrays must have the same shapes.",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "div",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray equal to array1/array2.",
                    "signature": "div[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Elementwise quotent of array1 and array2."
                  },
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "scalar",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "div",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise quotient of `array1` and`array2`.",
                    "signature": "div[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype], scalar: SIMD[dtype, 1]) -> NDArray[$0]",
                    "summary": "Perform true division on between an array and a scalar."
                  },
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "scalar",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "div",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise quotient of `array1` and`array2`.",
                    "signature": "div[dtype: DType, backend: Backend = Vectorized](scalar: SIMD[dtype, 1], array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Perform true division on between an array and a scalar."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "floor_div",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array1",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array2",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "Both arrays must have the same shapes.",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "floor_div",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray equal to array1/array2.",
                    "signature": "floor_div[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Elementwise quotent of array1 and array2."
                  },
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "scalar",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "floor_div",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise quotient of `array1` and`array2`.",
                    "signature": "floor_div[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype], scalar: SIMD[dtype, 1]) -> NDArray[$0]",
                    "summary": "Perform true division on between an array and a scalar."
                  },
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "scalar",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "floor_div",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise quotient of `array1` and`array2`.",
                    "signature": "floor_div[dtype: DType, backend: Backend = Vectorized](scalar: SIMD[dtype, 1], array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Perform true division on between an array and a scalar."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "fma",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array1",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array2",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array3",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "Both arrays must have the same shape.",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "fma",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                    "signature": "fma[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype], array3: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Apply a SIMD level fuse multipy add function of three variables and one return to a NDArray."
                  },
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array1",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array2",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "A SIMD[dtype,1] value to be added.",
                        "kind": "argument",
                        "name": "simd",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[dtype, 1]"
                      }
                    ],
                    "async": false,
                    "constraints": "Both arrays must have the same shape",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "fma",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                    "signature": "fma[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype], simd: SIMD[dtype, 1]) -> NDArray[$0]",
                    "summary": "Apply a SIMD level fuse multipy add function of three variables and one return to a NDArray."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "remainder",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array1",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array2",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "Both arrays must have the same shapes.",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "remainder",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray equal to array1//array2.",
                    "signature": "remainder[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Elementwise remainders of NDArray."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "cbrt",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "Both arrays must have the same shapes.",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "cbrt",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray equal to NDArray**(1/3).",
                    "signature": "cbrt[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Elementwise cuberoot of NDArray."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "rsqrt",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "rsqrt",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray equal to 1/NDArray**(1/2).",
                    "signature": "rsqrt[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Elementwise reciprocal squareroot of NDArray."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "sqrt",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "sqrt",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray equal to NDArray**(1/2).",
                    "signature": "sqrt[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Elementwise squareroot of NDArray."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "exp2",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "exp2",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray with the shape of `NDArray` with values equal to the 2 to the power of the value in the original NDArray at each position.",
                    "signature": "exp2[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Calculate elementwise two to the power of NDArray[i]."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "exp",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "exp",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray with the shape of `NDArray` with values equal to the e to the power of the value in the original NDArray at each position.",
                    "signature": "exp[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Calculate elementwise euler's constant(e) to the power of NDArray[i]."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "expm1",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "expm1",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray with the shape of `NDArray` with values equal to the negative one plus e to the power of the value in the original NDArray at each position.",
                    "signature": "expm1[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Calculate elementwise euler's constant(e) to the power of NDArray[i] minus1."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "scalb",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array1",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array2",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "scalb",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray with the shape of `NDArray` with values equal to the negative one plus e to the power of the value in the original NDArray at each position.",
                    "signature": "scalb[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Calculate the scalb of array1 and array2."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "log",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "log",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray equal to ln(NDArray).",
                    "signature": "log[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Elementwise natural logarithm of NDArray."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "log2",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "log2",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray equal to log_2(NDArray).",
                    "signature": "log2[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Elementwise logarithm base two of NDArray."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "log10",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "log10",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray equal to log_10(NDArray).",
                    "signature": "log10[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Elementwise logarithm base ten of NDArray."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "log1p",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "log1p",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray equal to ln(NDArray+1).",
                    "signature": "log1p[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Elementwise natural logarithm of 1 plus NDArray."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "tabs",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "tabs",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray equal to abs(NDArray).",
                    "signature": "tabs[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Elementwise absolute value of NDArray."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "tfloor",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "tfloor",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray equal to floor(NDArray).",
                    "signature": "tfloor[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Elementwise round down to nearest whole number of NDArray."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "tceil",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "tceil",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray equal to ceil(NDArray).",
                    "signature": "tceil[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Elementwise round up to nearest whole number of NDArray."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "ttrunc",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "ttrunc",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray equal to trunc(NDArray).",
                    "signature": "ttrunc[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Elementwise remove decimal value from float whole number of NDArray."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "tround",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "tround",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray equal to trunc(NDArray).",
                    "signature": "tround[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Elementwise round NDArray to whole number."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "roundeven",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "Array to perform rounding on.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "roundeven",
                    "parameters": [
                      {
                        "description": "The dtype of the input and output array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise banker's rounding of NDArray.  This rounding goes to the nearest integer with ties toward the nearest even integer.",
                    "signature": "roundeven[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Performs elementwise banker's rounding on the elements of a NDArray."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "nextafter",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "The first input argument.",
                        "kind": "argument",
                        "name": "array1",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "The second input argument.",
                        "kind": "argument",
                        "name": "array2",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "nextafter",
                    "parameters": [
                      {
                        "description": "The dtype of the input and output array. Constraints: must be a floating-point type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The nextafter of the inputs.",
                    "signature": "nextafter[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Computes the nextafter of the inputs."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "invert",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "The array must be either a boolean or integral array.",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "invert",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized`.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "A NDArray equal to the bitwise inversion of array.",
                    "signature": "invert[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Elementwise invert of an array."
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "arithmetic",
            "structs": [],
            "summary": "Implements array arithmetic",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "isinf",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "NDArray[dtype] - Input array to check.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "isinf",
                    "parameters": [
                      {
                        "description": "DType - Data type of the input array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "_mf.Backend - Backend to use for the operation. Defaults to _mf.Vectorized.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[bool]",
                    "returnsDoc": "NDArray[DType.bool] - A array of the same shape as `array` with True for infinite elements and False for others.",
                    "signature": "isinf[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[bool]",
                    "summary": "Checks if each element of the input array is infinite."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "isfinite",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "NDArray[dtype] - Input array to check.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "isfinite",
                    "parameters": [
                      {
                        "description": "DType - Data type of the input array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "_mf.Backend - Backend to use for the operation. Defaults to _mf.Vectorized.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[bool]",
                    "returnsDoc": "NDArray[DType.bool] - A array of the same shape as `array` with True for finite elements and False for others.",
                    "signature": "isfinite[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[bool]",
                    "summary": "Checks if each element of the input array is finite."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "isnan",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "NDArray[dtype] - Input array to check.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "isnan",
                    "parameters": [
                      {
                        "description": "DType - Data type of the input array.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "_mf.Backend - Backend to use for the operation. Defaults to _mf.Vectorized.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[bool]",
                    "returnsDoc": "NDArray[DType.bool] - A array of the same shape as `array` with True for NaN elements and False for others.",
                    "signature": "isnan[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[bool]",
                    "summary": "Checks if each element of the input array is NaN."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "any",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[bool]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "any",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "SIMD[bool, 1]",
                    "returnsDoc": "",
                    "signature": "any(array: NDArray[bool]) -> SIMD[bool, 1]",
                    "summary": "If any True."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "allt",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "A NDArray.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[bool]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "allt",
                    "parameters": [],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "SIMD[bool, 1]",
                    "returnsDoc": "",
                    "signature": "allt(array: NDArray[bool]) -> SIMD[bool, 1]",
                    "summary": "If all True."
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "check",
            "structs": [],
            "summary": "Implements Checking routines: currently not SIMD due to bool bit packing issue",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "greater",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "First NDArray to compare.",
                        "kind": "argument",
                        "name": "array1",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "Second NDArray to compare.",
                        "kind": "argument",
                        "name": "array2",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "greater",
                    "parameters": [
                      {
                        "description": "The dtype of the input NDArray.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[bool]",
                    "returnsDoc": "A NDArray containing True if the corresponding element in x is greater than the corresponding element in y, otherwise False.  An element of the result NDArray will be True if the corresponding element in x is greater than the corresponding element in y, and False otherwise.",
                    "signature": "greater[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[bool]",
                    "summary": "Performs elementwise check of whether values in x are greater than values in y."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "greater_equal",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "First NDArray to compare.",
                        "kind": "argument",
                        "name": "array1",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "Second NDArray to compare.",
                        "kind": "argument",
                        "name": "array2",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "greater_equal",
                    "parameters": [
                      {
                        "description": "The dtype of the input NDArray.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[bool]",
                    "returnsDoc": "A NDArray containing True if the corresponding element in x is greater than or equal to the corresponding element in y, otherwise False.  An element of the result NDArray will be True if the corresponding element in x is greater than or equal to the corresponding element in y, and False otherwise.",
                    "signature": "greater_equal[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[bool]",
                    "summary": "Performs elementwise check of whether values in x are greater than or equal to values in y."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "less",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "First NDArray to compare.",
                        "kind": "argument",
                        "name": "array1",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "Second NDArray to compare.",
                        "kind": "argument",
                        "name": "array2",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "less",
                    "parameters": [
                      {
                        "description": "The dtype of the input NDArray.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[bool]",
                    "returnsDoc": "A NDArray containing True if the corresponding element in x is or equal to the corresponding element in y, otherwise False.  An element of the result NDArray will be True if the corresponding element in x is or equal to the corresponding element in y, and False otherwise.",
                    "signature": "less[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[bool]",
                    "summary": "Performs elementwise check of whether values in x are to values in y."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "less_equal",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "First NDArray to compare.",
                        "kind": "argument",
                        "name": "array1",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "Second NDArray to compare.",
                        "kind": "argument",
                        "name": "array2",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "less_equal",
                    "parameters": [
                      {
                        "description": "The dtype of the input NDArray.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[bool]",
                    "returnsDoc": "A NDArray containing True if the corresponding element in x is less than or equal to the corresponding element in y, otherwise False.  An element of the result NDArray will be True if the corresponding element in x is less than or equal to the corresponding element in y, and False otherwise.",
                    "signature": "less_equal[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[bool]",
                    "summary": "Performs elementwise check of whether values in x are less than or equal to values in y."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "equal",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "First NDArray to compare.",
                        "kind": "argument",
                        "name": "array1",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "Second NDArray to compare.",
                        "kind": "argument",
                        "name": "array2",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "equal",
                    "parameters": [
                      {
                        "description": "The dtype of the input NDArray.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[bool]",
                    "returnsDoc": "A NDArray containing True if the corresponding element in x is equal to the corresponding element in y, otherwise False.  An element of the result NDArray will be True if the corresponding element in x is equal to the corresponding element in y, and False otherwise.",
                    "signature": "equal[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[bool]",
                    "summary": "Performs elementwise check of whether values in x are equal to values in y."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "not_equal",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "First NDArray to compare.",
                        "kind": "argument",
                        "name": "array1",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "Second NDArray to compare.",
                        "kind": "argument",
                        "name": "array2",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "not_equal",
                    "parameters": [
                      {
                        "description": "The dtype of the input NDArray.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[bool]",
                    "returnsDoc": "A NDArray containing True if the corresponding element in x is not equal to the corresponding element in y, otherwise False.  An element of the result NDArray will be True if the corresponding element in x is not equal to the corresponding element in y, and False otherwise.",
                    "signature": "not_equal[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[bool]",
                    "summary": "Performs elementwise check of whether values in x are not equal to values in y."
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "comparison",
            "structs": [],
            "summary": "Implements comparison math currently not using backend due to bool bitpacking issue",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "interpolate",
            "structs": [],
            "summary": "",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "bool_simd_store",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "Pointer to be retreived from.",
                        "kind": "argument",
                        "name": "ptr",
                        "passingKind": "pos_or_kw",
                        "type": "DTypePointer[bool, 0]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "Start position in pointer.",
                        "kind": "argument",
                        "name": "start",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      },
                      {
                        "convention": "borrowed",
                        "description": "Value to store at locations.",
                        "kind": "argument",
                        "name": "val",
                        "passingKind": "pos_or_kw",
                        "type": "SIMD[bool, width]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "bool_simd_store",
                    "parameters": [
                      {
                        "description": "Number of items to be retrieved.",
                        "kind": "parameter",
                        "name": "width",
                        "passingKind": "pos_or_kw",
                        "type": "Int"
                      }
                    ],
                    "raises": false,
                    "raisesDoc": "",
                    "returnType": null,
                    "returnsDoc": "",
                    "signature": "bool_simd_store[width: Int](ptr: DTypePointer[bool, 0], start: Int, val: SIMD[bool, width])",
                    "summary": "Work around function for storing bools from a simd into a DTypePointer."
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "math_funcs",
            "structs": [
              {
                "aliases": [],
                "constraints": "",
                "deprecated": "",
                "description": "Defualt Numojo computation backend takes advantage of SIMD.\nUses defualt simdwidth.",
                "fields": [],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_fma",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array3",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shape",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_fma",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_fma[dtype: DType](self: Self, array1: NDArray[dtype], array2: NDArray[dtype], array3: NDArray[dtype]) -> NDArray[$0]",
                        "summary": "Apply a SIMD level fuse multipy add function of three variables and one return to a NDArray."
                      },
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A SIMD[dtype,1] value to be added.",
                            "kind": "argument",
                            "name": "simd",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shape",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_fma",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_fma[dtype: DType](self: Self, array1: NDArray[dtype], array2: NDArray[dtype], simd: SIMD[dtype, 1]) -> NDArray[$0]",
                        "summary": "Apply a SIMD level fuse multipy add function of three variables and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_1_array_in_one_array_out",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_1_array_in_one_array_out",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "The SIMD function to to apply.",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1]) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_1_array_in_one_array_out[dtype: DType, func: fn[DType, Int](SIMD[$0, $1]) -> SIMD[$0, $1]](self: Self, array: NDArray[dtype]) -> NDArray[$0]",
                        "summary": "Apply a SIMD function of one variable and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_2_array_in_one_array_out",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shape",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_2_array_in_one_array_out",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "The SIMD function to to apply.",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_2_array_in_one_array_out[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]](self: Self, array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[$0]",
                        "summary": "Apply a SIMD function of two variable and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_1_array_1_scalar_in_one_array_out",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A Scalars.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_1_array_1_scalar_in_one_array_out",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "The SIMD function to to apply.",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_1_array_1_scalar_in_one_array_out[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]](self: Self, array: NDArray[dtype], scalar: SIMD[dtype, 1]) -> NDArray[$0]",
                        "summary": "Apply a SIMD function of two variable and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_compare_2_arrays",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_compare_2_arrays",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[bool, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "math_func_compare_2_arrays[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[bool, $1]](self: Self, array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[bool]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_is",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_is",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1]) -> SIMD[bool, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "math_func_is[dtype: DType, func: fn[DType, Int](SIMD[$0, $1]) -> SIMD[bool, $1]](self: Self, array: NDArray[dtype]) -> NDArray[bool]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_simd_int",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "intval",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_simd_int",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], Int) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "",
                        "signature": "math_func_simd_int[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], Int) -> SIMD[$0, $1]](self: Self, array: NDArray[dtype], intval: Int) -> NDArray[$0]",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "Vectorized",
                "parameters": [],
                "parentTraits": [
                  "AnyType",
                  "Backend"
                ],
                "summary": "Vectorized Backend Struct. Parameters     unroll_factor: factor by which loops are unrolled."
              },
              {
                "aliases": [],
                "constraints": "",
                "deprecated": "",
                "description": "Defualt Numojo computation backend takes advantage of SIMD.\nUses defualt simdwidth.",
                "fields": [],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_fma",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array3",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shape",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_fma",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_fma[dtype: DType](self: Self, array1: NDArray[dtype], array2: NDArray[dtype], array3: NDArray[dtype]) -> NDArray[$0]",
                        "summary": "Apply a SIMD level fuse multipy add function of three variables and one return to a NDArray."
                      },
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A SIMD[dtype,1] value to be added.",
                            "kind": "argument",
                            "name": "simd",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shape",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_fma",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_fma[dtype: DType](self: Self, array1: NDArray[dtype], array2: NDArray[dtype], simd: SIMD[dtype, 1]) -> NDArray[$0]",
                        "summary": "Apply a SIMD level fuse multipy add function of three variables and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_1_array_in_one_array_out",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_1_array_in_one_array_out",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "The SIMD function to to apply.",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1]) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_1_array_in_one_array_out[dtype: DType, func: fn[DType, Int](SIMD[$0, $1]) -> SIMD[$0, $1]](self: Self, array: NDArray[dtype]) -> NDArray[$0]",
                        "summary": "Apply a SIMD function of one variable and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_2_array_in_one_array_out",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shape",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_2_array_in_one_array_out",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "The SIMD function to to apply.",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_2_array_in_one_array_out[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]](self: Self, array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[$0]",
                        "summary": "Apply a SIMD function of two variable and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_1_array_1_scalar_in_one_array_out",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A Scalars.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_1_array_1_scalar_in_one_array_out",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "The SIMD function to to apply.",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_1_array_1_scalar_in_one_array_out[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]](self: Self, array: NDArray[dtype], scalar: SIMD[dtype, 1]) -> NDArray[$0]",
                        "summary": "Apply a SIMD function of two variable and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_compare_2_arrays",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_compare_2_arrays",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[bool, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "math_func_compare_2_arrays[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[bool, $1]](self: Self, array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[bool]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_is",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_is",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1]) -> SIMD[bool, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "math_func_is[dtype: DType, func: fn[DType, Int](SIMD[$0, $1]) -> SIMD[bool, $1]](self: Self, array: NDArray[dtype]) -> NDArray[bool]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_simd_int",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "intval",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_simd_int",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], Int) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "",
                        "signature": "math_func_simd_int[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], Int) -> SIMD[$0, $1]](self: Self, array: NDArray[dtype], intval: Int) -> NDArray[$0]",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "VectorizedUnroll",
                "parameters": [
                  {
                    "default": "1",
                    "description": "",
                    "kind": "parameter",
                    "name": "unroll_factor",
                    "passingKind": "pos_or_kw",
                    "type": "Int"
                  }
                ],
                "parentTraits": [
                  "AnyType",
                  "Backend"
                ],
                "summary": "Vectorized Backend Struct. Parameters     unroll_factor: factor by which loops are unrolled."
              },
              {
                "aliases": [],
                "constraints": "",
                "deprecated": "",
                "description": "Currently an order of magnitude slower than Vectorized for most functions.\nNo idea why, Not Reccomened for use at this Time.",
                "fields": [],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_fma",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array3",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shape",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_fma",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_fma[dtype: DType](self: Self, array1: NDArray[dtype], array2: NDArray[dtype], array3: NDArray[dtype]) -> NDArray[$0]",
                        "summary": "Apply a SIMD level fuse multipy add function of three variables and one return to a NDArray."
                      },
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A SIMD[dtype,1] value to be added.",
                            "kind": "argument",
                            "name": "simd",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shape.",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_fma",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_fma[dtype: DType](self: Self, array1: NDArray[dtype], array2: NDArray[dtype], simd: SIMD[dtype, 1]) -> NDArray[$0]",
                        "summary": "Apply a SIMD level fuse multipy add function of three variables and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_1_array_in_one_array_out",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_1_array_in_one_array_out",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "The SIMD function to to apply.",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1]) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_1_array_in_one_array_out[dtype: DType, func: fn[DType, Int](SIMD[$0, $1]) -> SIMD[$0, $1]](self: Self, array: NDArray[dtype]) -> NDArray[$0]",
                        "summary": "Apply a SIMD function of one variable and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_2_array_in_one_array_out",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shape",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_2_array_in_one_array_out",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "The SIMD function to to apply.",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_2_array_in_one_array_out[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]](self: Self, array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[$0]",
                        "summary": "Apply a SIMD function of two variable and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_1_array_1_scalar_in_one_array_out",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A Scalars.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_1_array_1_scalar_in_one_array_out",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "The SIMD function to to apply.",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_1_array_1_scalar_in_one_array_out[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]](self: Self, array: NDArray[dtype], scalar: SIMD[dtype, 1]) -> NDArray[$0]",
                        "summary": "Apply a SIMD function of two variable and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_compare_2_arrays",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_compare_2_arrays",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[bool, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "math_func_compare_2_arrays[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[bool, $1]](self: Self, array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[bool]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_is",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_is",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1]) -> SIMD[bool, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "math_func_is[dtype: DType, func: fn[DType, Int](SIMD[$0, $1]) -> SIMD[bool, $1]](self: Self, array: NDArray[dtype]) -> NDArray[bool]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_simd_int",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "intval",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_simd_int",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], Int) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "",
                        "signature": "math_func_simd_int[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], Int) -> SIMD[$0, $1]](self: Self, array: NDArray[dtype], intval: Int) -> NDArray[$0]",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "Parallelized",
                "parameters": [],
                "parentTraits": [
                  "AnyType",
                  "Backend"
                ],
                "summary": "Parrallelized Backend Struct."
              },
              {
                "aliases": [],
                "constraints": "",
                "deprecated": "",
                "description": "Currently an order of magnitude slower than Vectorized for most functions.\nNo idea why, Not Reccomened for use at this Time.",
                "fields": [],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_fma",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array3",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shape",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_fma",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_fma[dtype: DType](self: Self, array1: NDArray[dtype], array2: NDArray[dtype], array3: NDArray[dtype]) -> NDArray[$0]",
                        "summary": "Apply a SIMD level fuse multipy add function of three variables and one return to a NDArray."
                      },
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A SIMD[dtype,1] value to be added.",
                            "kind": "argument",
                            "name": "simd",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shape.",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_fma",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_fma[dtype: DType](self: Self, array1: NDArray[dtype], array2: NDArray[dtype], simd: SIMD[dtype, 1]) -> NDArray[$0]",
                        "summary": "Apply a SIMD level fuse multipy add function of three variables and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_1_array_in_one_array_out",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_1_array_in_one_array_out",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "The SIMD function to to apply.",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1]) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_1_array_in_one_array_out[dtype: DType, func: fn[DType, Int](SIMD[$0, $1]) -> SIMD[$0, $1]](self: Self, array: NDArray[dtype]) -> NDArray[$0]",
                        "summary": "Apply a SIMD function of one variable and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_2_array_in_one_array_out",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shape.",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_2_array_in_one_array_out",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "The SIMD function to to apply.",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_2_array_in_one_array_out[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]](self: Self, array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[$0]",
                        "summary": "Apply a SIMD function of two variable and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_1_array_1_scalar_in_one_array_out",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A Scalars.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_1_array_1_scalar_in_one_array_out",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "The SIMD function to to apply.",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_1_array_1_scalar_in_one_array_out[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]](self: Self, array: NDArray[dtype], scalar: SIMD[dtype, 1]) -> NDArray[$0]",
                        "summary": "Apply a SIMD function of two variable and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_compare_2_arrays",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_compare_2_arrays",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[bool, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "math_func_compare_2_arrays[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[bool, $1]](self: Self, array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[bool]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_is",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_is",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1]) -> SIMD[bool, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "math_func_is[dtype: DType, func: fn[DType, Int](SIMD[$0, $1]) -> SIMD[bool, $1]](self: Self, array: NDArray[dtype]) -> NDArray[bool]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_simd_int",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "intval",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_simd_int",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], Int) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "",
                        "signature": "math_func_simd_int[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], Int) -> SIMD[$0, $1]](self: Self, array: NDArray[dtype], intval: Int) -> NDArray[$0]",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "VectorizedParallelized",
                "parameters": [],
                "parentTraits": [
                  "AnyType",
                  "Backend"
                ],
                "summary": "Vectorized and Parrallelized Backend Struct."
              },
              {
                "aliases": [],
                "constraints": "",
                "deprecated": "",
                "description": "Speed ups can be acheived by dividing the work across a number of cores, for Windows\nthis number seems to be less than `num_physical_cores()`.",
                "fields": [],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_fma",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array3",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shape.",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_fma",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_fma[dtype: DType](self: Self, array1: NDArray[dtype], array2: NDArray[dtype], array3: NDArray[dtype]) -> NDArray[$0]",
                        "summary": "Apply a SIMD level fuse multipy add function of three variables and one return to a NDArray."
                      },
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A SIMD[dtype,1] value to be added.",
                            "kind": "argument",
                            "name": "simd",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shape.",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_fma",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_fma[dtype: DType](self: Self, array1: NDArray[dtype], array2: NDArray[dtype], simd: SIMD[dtype, 1]) -> NDArray[$0]",
                        "summary": "Apply a SIMD level fuse multipy add function of three variables and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_1_array_in_one_array_out",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_1_array_in_one_array_out",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "The SIMD function to to apply.",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1]) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_1_array_in_one_array_out[dtype: DType, func: fn[DType, Int](SIMD[$0, $1]) -> SIMD[$0, $1]](self: Self, array: NDArray[dtype]) -> NDArray[$0]",
                        "summary": "Apply a SIMD function of one variable and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_2_array_in_one_array_out",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shape",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_2_array_in_one_array_out",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "The SIMD function to to apply.",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_2_array_in_one_array_out[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]](self: Self, array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[$0]",
                        "summary": "Apply a SIMD function of two variable and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_1_array_1_scalar_in_one_array_out",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A Scalars.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_1_array_1_scalar_in_one_array_out",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "The SIMD function to to apply.",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_1_array_1_scalar_in_one_array_out[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]](self: Self, array: NDArray[dtype], scalar: SIMD[dtype, 1]) -> NDArray[$0]",
                        "summary": "Apply a SIMD function of two variable and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_compare_2_arrays",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_compare_2_arrays",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[bool, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "math_func_compare_2_arrays[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[bool, $1]](self: Self, array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[bool]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_is",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_is",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1]) -> SIMD[bool, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "math_func_is[dtype: DType, func: fn[DType, Int](SIMD[$0, $1]) -> SIMD[bool, $1]](self: Self, array: NDArray[dtype]) -> NDArray[bool]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_simd_int",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "intval",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_simd_int",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], Int) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "",
                        "signature": "math_func_simd_int[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], Int) -> SIMD[$0, $1]](self: Self, array: NDArray[dtype], intval: Int) -> NDArray[$0]",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "VectorizedParallelizedNWorkers",
                "parameters": [
                  {
                    "default": "num_physical_cores()",
                    "description": "",
                    "kind": "parameter",
                    "name": "num_cores",
                    "passingKind": "pos_or_kw",
                    "type": "Int"
                  }
                ],
                "parentTraits": [
                  "AnyType",
                  "Backend"
                ],
                "summary": "Vectorized and Parrallelized Backend Struct with manual setting of number of workers."
              },
              {
                "aliases": [],
                "constraints": "",
                "deprecated": "",
                "description": "Just loops for SIMD[Dtype, 1] equations",
                "fields": [],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_fma",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array3",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shape",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_fma",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_fma[dtype: DType](self: Self, array1: NDArray[dtype], array2: NDArray[dtype], array3: NDArray[dtype]) -> NDArray[$0]",
                        "summary": "Apply a SIMD level fuse multipy add function of three variables and one return to a NDArray."
                      },
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A SIMD[dtype,1] value to be added.",
                            "kind": "argument",
                            "name": "simd",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shape",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_fma",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_fma[dtype: DType](self: Self, array1: NDArray[dtype], array2: NDArray[dtype], simd: SIMD[dtype, 1]) -> NDArray[$0]",
                        "summary": "Apply a SIMD level fuse multipy add function of three variables and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_1_array_in_one_array_out",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_1_array_in_one_array_out",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "The SIMD function to to apply.",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1]) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_1_array_in_one_array_out[dtype: DType, func: fn[DType, Int](SIMD[$0, $1]) -> SIMD[$0, $1]](self: Self, array: NDArray[dtype]) -> NDArray[$0]",
                        "summary": "Apply a SIMD function of one variable and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_2_array_in_one_array_out",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shape",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_2_array_in_one_array_out",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "The SIMD function to to apply.",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_2_array_in_one_array_out[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]](self: Self, array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[$0]",
                        "summary": "Apply a SIMD function of two variable and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_1_array_1_scalar_in_one_array_out",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A Scalars.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_1_array_1_scalar_in_one_array_out",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "The SIMD function to to apply.",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_1_array_1_scalar_in_one_array_out[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]](self: Self, array: NDArray[dtype], scalar: SIMD[dtype, 1]) -> NDArray[$0]",
                        "summary": "Apply a SIMD function of two variable and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_compare_2_arrays",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_compare_2_arrays",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[bool, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "math_func_compare_2_arrays[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[bool, $1]](self: Self, array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[bool]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_is",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_is",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1]) -> SIMD[bool, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "math_func_is[dtype: DType, func: fn[DType, Int](SIMD[$0, $1]) -> SIMD[bool, $1]](self: Self, array: NDArray[dtype]) -> NDArray[bool]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_simd_int",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "intval",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_simd_int",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], Int) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "",
                        "signature": "math_func_simd_int[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], Int) -> SIMD[$0, $1]](self: Self, array: NDArray[dtype], intval: Int) -> NDArray[$0]",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "Naive",
                "parameters": [],
                "parentTraits": [
                  "AnyType",
                  "Backend"
                ],
                "summary": "Naive Backend Struct."
              },
              {
                "aliases": [],
                "constraints": "",
                "deprecated": "",
                "description": "Defualt Numojo computation backend takes advantage of SIMD.\nUses defualt simdwidth.",
                "fields": [],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "Self"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: Self)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_fma",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array3",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shape",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_fma",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_fma[dtype: DType](self: Self, array1: NDArray[dtype], array2: NDArray[dtype], array3: NDArray[dtype]) -> NDArray[$0]",
                        "summary": "Apply a SIMD level fuse multipy add function of three variables and one return to a NDArray."
                      },
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A SIMD[dtype,1] value to be added.",
                            "kind": "argument",
                            "name": "simd",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shape",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_fma",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_fma[dtype: DType](self: Self, array1: NDArray[dtype], array2: NDArray[dtype], simd: SIMD[dtype, 1]) -> NDArray[$0]",
                        "summary": "Apply a SIMD level fuse multipy add function of three variables and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_1_array_in_one_array_out",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_1_array_in_one_array_out",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "The SIMD function to to apply.",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1]) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_1_array_in_one_array_out[dtype: DType, func: fn[DType, Int](SIMD[$0, $1]) -> SIMD[$0, $1]](self: Self, array: NDArray[dtype]) -> NDArray[$0]",
                        "summary": "Apply a SIMD function of one variable and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_2_array_in_one_array_out",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shape",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_2_array_in_one_array_out",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "The SIMD function to to apply.",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_2_array_in_one_array_out[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]](self: Self, array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[$0]",
                        "summary": "Apply a SIMD function of two variable and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_1_array_1_scalar_in_one_array_out",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A Scalars.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_1_array_1_scalar_in_one_array_out",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "The SIMD function to to apply.",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_1_array_1_scalar_in_one_array_out[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]](self: Self, array: NDArray[dtype], scalar: SIMD[dtype, 1]) -> NDArray[$0]",
                        "summary": "Apply a SIMD function of two variable and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_compare_2_arrays",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_compare_2_arrays",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[bool, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "math_func_compare_2_arrays[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[bool, $1]](self: Self, array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[bool]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_is",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_is",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1]) -> SIMD[bool, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "math_func_is[dtype: DType, func: fn[DType, Int](SIMD[$0, $1]) -> SIMD[bool, $1]](self: Self, array: NDArray[dtype]) -> NDArray[bool]",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_simd_int",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "Self"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "intval",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_simd_int",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], Int) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "",
                        "signature": "math_func_simd_int[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], Int) -> SIMD[$0, $1]](self: Self, array1: NDArray[dtype], intval: Int) -> NDArray[$0]",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "struct",
                "name": "VectorizedVerbose",
                "parameters": [],
                "parentTraits": [
                  "AnyType",
                  "Backend"
                ],
                "summary": "Vectorized Backend Struct."
              }
            ],
            "summary": "Implements backend functions for mathematics",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [
              {
                "kind": "function",
                "name": "acos",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "An Array.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "acos",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise acos of `array` in radians.",
                    "signature": "acos[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Apply acos also known as inverse cosine ."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "asin",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "An Array.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "asin",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise asin of `array` in radians.",
                    "signature": "asin[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Apply asin also known as inverse sine ."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "atan",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "An Array.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "atan",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise atan of `array` in radians.",
                    "signature": "atan[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Apply atan also known as inverse tangent ."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "atan2",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "An Array.",
                        "kind": "argument",
                        "name": "array1",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "An Array.",
                        "kind": "argument",
                        "name": "array2",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "Both arrays must have the same shapes.",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "atan2",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise atan2 of `array1` and`array2` in radians.",
                    "signature": "atan2[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Apply atan2 also known as inverse tangent. [atan2 wikipedia](https://en.wikipedia.org/wiki/Atan2)."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "cos",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "An Array assumed to be in radian.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "cos",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise cos of `array`.",
                    "signature": "cos[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Apply cos also known as cosine."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "sin",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "An Array assumed to be in radian.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "sin",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise sin of `array`.",
                    "signature": "sin[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Apply sin also known as sine ."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "tan",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "An Array assumed to be in radian.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "tan",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise tan of `array`.",
                    "signature": "tan[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Apply tan also known as tangent ."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "hypot",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "An Array.",
                        "kind": "argument",
                        "name": "array1",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "An Array.",
                        "kind": "argument",
                        "name": "array2",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "Both arrays must have the same shapes.",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "hypot",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise hypotenuse of `array1` and`array2`.",
                    "signature": "hypot[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Apply hypot also known as hypotenuse which finds the longest section of a right triangle given the other two sides."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "hypot_fma",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "An Array.",
                        "kind": "argument",
                        "name": "array1",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      },
                      {
                        "convention": "borrowed",
                        "description": "An Array.",
                        "kind": "argument",
                        "name": "array2",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "Both arrays must have the same shapes.",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "hypot_fma",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise hypotenuse of `array1` and`array2`.",
                    "signature": "hypot_fma[dtype: DType, backend: Backend = Vectorized](array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Apply hypot also known as hypotenuse which finds the longest section of a right triangle given the other two sides."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "acosh",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "An Array.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "acosh",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise acosh of `array` in radians.",
                    "signature": "acosh[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Apply acosh also known as inverse hyperbolic cosine ."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "asinh",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "An Array.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "asinh",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise asinh of `array` in radians.",
                    "signature": "asinh[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Apply asinh also known as inverse hyperbolic sine ."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "atanh",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "An Array.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "atanh",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise atanh of `array` in radians.",
                    "signature": "atanh[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Apply atanh also known as inverse hyperbolic tangent ."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "cosh",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "An Array assumed to be in radian.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "cosh",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise cosh of `array`.",
                    "signature": "cosh[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Apply cosh also known as hyperbolic cosine ."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "sinh",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "An Array assumed to be in radian.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "sinh",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise sinh of `array`.",
                    "signature": "sinh[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Apply sin also known as hyperbolic sine ."
                  }
                ]
              },
              {
                "kind": "function",
                "name": "tanh",
                "overloads": [
                  {
                    "args": [
                      {
                        "convention": "borrowed",
                        "description": "An Array assumed to be in radian.",
                        "kind": "argument",
                        "name": "array",
                        "passingKind": "pos_or_kw",
                        "type": "NDArray[dtype]"
                      }
                    ],
                    "async": false,
                    "constraints": "",
                    "deprecated": "",
                    "description": "",
                    "isDef": false,
                    "isStatic": false,
                    "kind": "function",
                    "name": "tanh",
                    "parameters": [
                      {
                        "description": "The element type.",
                        "kind": "parameter",
                        "name": "dtype",
                        "passingKind": "pos_or_kw",
                        "type": "DType"
                      },
                      {
                        "default": "Vectorized",
                        "description": "Sets utility function origin, defualts to `Vectorized.",
                        "kind": "parameter",
                        "name": "backend",
                        "passingKind": "pos_or_kw",
                        "type": "Backend"
                      }
                    ],
                    "raises": true,
                    "raisesDoc": "",
                    "returnType": "NDArray[$0]",
                    "returnsDoc": "The elementwise tanh of `array`.",
                    "signature": "tanh[dtype: DType, backend: Backend = Vectorized](array: NDArray[dtype]) -> NDArray[$0]",
                    "summary": "Apply tan also known as hyperbolic tangent ."
                  }
                ]
              }
            ],
            "kind": "module",
            "name": "trig",
            "structs": [],
            "summary": "Implements Trigonometry functions for arrays.",
            "traits": []
          }
        ],
        "name": "math",
        "packages": [
          {
            "description": "",
            "kind": "package",
            "modules": [
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "__init__",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "gradient",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "An array.",
                            "kind": "argument",
                            "name": "x",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[in_dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "An array of the same shape as x containing the spacing between adjacent elements.",
                            "kind": "argument",
                            "name": "spacing",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[in_dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "`fdtype` must be a floating-point type if `idtype` is not a floating-point type.",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "gradient",
                        "parameters": [
                          {
                            "description": "Input data type.",
                            "kind": "parameter",
                            "name": "in_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "float32",
                            "description": "Output data type, defaults to float32.",
                            "kind": "parameter",
                            "name": "out_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$1]",
                        "returnsDoc": "The integral of y over x using the trapezoidal rule.",
                        "signature": "gradient[in_dtype: DType, out_dtype: DType = float32](x: NDArray[in_dtype], spacing: SIMD[in_dtype, 1]) -> NDArray[$1]",
                        "summary": "Compute the integral of y over x using the trapezoidal rule."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "differentiation",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "trapz",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "An array.",
                            "kind": "argument",
                            "name": "y",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[in_dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "An array.",
                            "kind": "argument",
                            "name": "x",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[in_dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "`x` and `y` must have the same shape. `fdtype` must be a floating-point type if `idtype` is not a floating-point type.",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "trapz",
                        "parameters": [
                          {
                            "description": "Input data type.",
                            "kind": "parameter",
                            "name": "in_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "float32",
                            "description": "Output data type, defaults to float32.",
                            "kind": "parameter",
                            "name": "out_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[$1, 1]",
                        "returnsDoc": "The integral of y over x using the trapezoidal rule.",
                        "signature": "trapz[in_dtype: DType, out_dtype: DType = float32](y: NDArray[in_dtype], x: NDArray[in_dtype]) -> SIMD[$1, 1]",
                        "summary": "Compute the integral of y over x using the trapezoidal rule."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "integral",
                "structs": [],
                "summary": "",
                "traits": []
              }
            ],
            "name": "calculus",
            "packages": [],
            "summary": ""
          },
          {
            "description": "",
            "kind": "package",
            "modules": [
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "__init__",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "cross",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "A array.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[in_dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A array.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[in_dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "`array1` and `array2` must be of shape (3,).",
                        "deprecated": "",
                        "description": "Parameters\n    in_dtype: Input data type.\n    out_dtype: Output data type, defaults to float32.\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cross",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "in_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "float32",
                            "description": "",
                            "kind": "parameter",
                            "name": "out_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$1]",
                        "returnsDoc": "The cross product of two arrays.",
                        "signature": "cross[in_dtype: DType, out_dtype: DType = float32](array1: NDArray[in_dtype], array2: NDArray[in_dtype]) -> NDArray[$1]",
                        "summary": "Compute the cross product of two arrays."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "linalg",
                "structs": [],
                "summary": "Linear Algebra misc. functions",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "tile",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "end_x",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "end_y",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "tile",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "tiled_fn",
                            "passingKind": "pos_or_kw",
                            "type": "fn[Int, Int](Int, Int) capturing -> None"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "tile_x",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "tile_y",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "tile[tiled_fn: fn[Int, Int](Int, Int) capturing -> None, tile_x: Int, tile_y: Int](end_x: Int, end_y: Int)",
                        "summary": ""
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "matmul_tiled_unrolled_parallelized",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "B",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "matmul_tiled_unrolled_parallelized",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "",
                        "signature": "matmul_tiled_unrolled_parallelized[dtype: DType](A: NDArray[dtype], B: NDArray[dtype]) -> NDArray[$0]",
                        "summary": "Matrix multiplication vectorized, tiled, unrolled, and parallelized."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "matmul_parallelized",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "B",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Conduct `matmul` using `vectorize` and `parallelize`.\n\nReference: https://docs.modular.com/mojo/notebooks/Matmul\nCompared to the reference, this function increases the size of\nthe SIMD vector from the default width to 16. The purpose is to\nincrease the performance via SIMD.\nThe function reduces the execution time by ~50 percent compared to\nmatmul_parallelized and matmul_tiled_unrolled_parallelized for large\nmatrices.",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "matmul_parallelized",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "",
                        "signature": "matmul_parallelized[dtype: DType](A: NDArray[dtype], B: NDArray[dtype]) -> NDArray[$0]",
                        "summary": "Matrix multiplication Vectorized and parallelized."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "matmul_naive",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "A",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "B",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "matmul_naive",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "",
                        "signature": "matmul_naive[dtype: DType](A: NDArray[dtype], B: NDArray[dtype]) -> NDArray[$0]",
                        "summary": "Matrix multiplication with three nested loops."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "matmul",
                "structs": [],
                "summary": "Matrix multiplication functions for NDArrays",
                "traits": []
              }
            ],
            "name": "linalg",
            "packages": [],
            "summary": ""
          },
          {
            "description": "",
            "kind": "package",
            "modules": [
              {
                "aliases": [],
                "description": "",
                "functions": [],
                "kind": "module",
                "name": "__init__",
                "structs": [],
                "summary": "",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "cumsum",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "An NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[in_dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cumsum",
                        "parameters": [
                          {
                            "description": "The input element type.",
                            "kind": "parameter",
                            "name": "in_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "float64",
                            "description": "The output element type.",
                            "kind": "parameter",
                            "name": "out_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "SIMD[$1, 1]",
                        "returnsDoc": "The sum of all items in the array as a SIMD Value of `dtype`.",
                        "signature": "cumsum[in_dtype: DType, out_dtype: DType = float64](array: NDArray[in_dtype]) -> SIMD[$1, 1]",
                        "summary": "Sum of all items of an array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "cumprod",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "An NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[in_dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cumprod",
                        "parameters": [
                          {
                            "description": "The input element type.",
                            "kind": "parameter",
                            "name": "in_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "float64",
                            "description": "The output element type.",
                            "kind": "parameter",
                            "name": "out_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "SIMD[$1, 1]",
                        "returnsDoc": "The product of all items in the array as a SIMD Value of `dtype`.",
                        "signature": "cumprod[in_dtype: DType, out_dtype: DType = float64](array: NDArray[in_dtype]) -> SIMD[$1, 1]",
                        "summary": "Product of all items in an array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "cummean",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "An NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[in_dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cummean",
                        "parameters": [
                          {
                            "description": "The input element type.",
                            "kind": "parameter",
                            "name": "in_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "float64",
                            "description": "The output element type.",
                            "kind": "parameter",
                            "name": "out_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[$1, 1]",
                        "returnsDoc": "The mean of all of the member values of array as a SIMD Value of `dtype`.",
                        "signature": "cummean[in_dtype: DType, out_dtype: DType = float64](array: NDArray[in_dtype]) -> SIMD[$1, 1]",
                        "summary": "Arithmatic mean of all items of an array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "mode",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "An NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[in_dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mode",
                        "parameters": [
                          {
                            "description": "The input element type.",
                            "kind": "parameter",
                            "name": "in_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "float64",
                            "description": "The output element type.",
                            "kind": "parameter",
                            "name": "out_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[$1, 1]",
                        "returnsDoc": "The mode of all of the member values of array as a SIMD Value of `dtype`.",
                        "signature": "mode[in_dtype: DType, out_dtype: DType = float64](array: NDArray[in_dtype]) -> SIMD[$1, 1]",
                        "summary": "Mode of all items of an array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "median",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "An NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[in_dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "median",
                        "parameters": [
                          {
                            "description": "The input element type.",
                            "kind": "parameter",
                            "name": "in_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "float64",
                            "description": "The output element type.",
                            "kind": "parameter",
                            "name": "out_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[$1, 1]",
                        "returnsDoc": "The median of all of the member values of array as a SIMD Value of `dtype`.",
                        "signature": "median[in_dtype: DType, out_dtype: DType = float64](array: NDArray[in_dtype]) -> SIMD[$1, 1]",
                        "summary": "Median value of all items of an array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "maxT",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[in_dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "maxT",
                        "parameters": [
                          {
                            "description": "The input element type.",
                            "kind": "parameter",
                            "name": "in_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "float64",
                            "description": "The output element type.",
                            "kind": "parameter",
                            "name": "out_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[$1, 1]",
                        "returnsDoc": "",
                        "signature": "maxT[in_dtype: DType, out_dtype: DType = float64](array: NDArray[in_dtype]) -> SIMD[$1, 1]",
                        "summary": "Maximum value of a array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "minT",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[in_dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "minT",
                        "parameters": [
                          {
                            "description": "The input element type.",
                            "kind": "parameter",
                            "name": "in_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "float64",
                            "description": "The output element type.",
                            "kind": "parameter",
                            "name": "out_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[$1, 1]",
                        "returnsDoc": "The minimum of all of the member values of array as a SIMD Value of `dtype`.",
                        "signature": "minT[in_dtype: DType, out_dtype: DType = float64](array: NDArray[in_dtype]) -> SIMD[$1, 1]",
                        "summary": "Minimum value of a array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "cumpvariance",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[in_dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "default": "#kgen.none",
                            "description": "The mean of the array, if provided.",
                            "kind": "argument",
                            "name": "mu",
                            "passingKind": "pos_or_kw",
                            "type": "Optional[SIMD[in_dtype, 1]]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cumpvariance",
                        "parameters": [
                          {
                            "description": "The input element type.",
                            "kind": "parameter",
                            "name": "in_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "float64",
                            "description": "The output element type..",
                            "kind": "parameter",
                            "name": "out_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[$1, 1]",
                        "returnsDoc": "",
                        "signature": "cumpvariance[in_dtype: DType, out_dtype: DType = float64](array: NDArray[in_dtype], mu: Optional[SIMD[in_dtype, 1]] = #kgen.none) -> SIMD[$1, 1]",
                        "summary": "Population variance of a array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "cumvariance",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[in_dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "default": "#kgen.none",
                            "description": "The mean of the array, if provided.",
                            "kind": "argument",
                            "name": "mu",
                            "passingKind": "pos_or_kw",
                            "type": "Optional[SIMD[in_dtype, 1]]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cumvariance",
                        "parameters": [
                          {
                            "description": "The input element type.",
                            "kind": "parameter",
                            "name": "in_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "float64",
                            "description": "The output element type.",
                            "kind": "parameter",
                            "name": "out_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[$1, 1]",
                        "returnsDoc": "The variance of all of the member values of array as a SIMD Value of `dtype`.",
                        "signature": "cumvariance[in_dtype: DType, out_dtype: DType = float64](array: NDArray[in_dtype], mu: Optional[SIMD[in_dtype, 1]] = #kgen.none) -> SIMD[$1, 1]",
                        "summary": "Variance of a array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "cumpstdev",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[in_dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "default": "#kgen.none",
                            "description": "The mean of the array, if provided.",
                            "kind": "argument",
                            "name": "mu",
                            "passingKind": "pos_or_kw",
                            "type": "Optional[SIMD[in_dtype, 1]]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cumpstdev",
                        "parameters": [
                          {
                            "description": "The input element type.",
                            "kind": "parameter",
                            "name": "in_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "float64",
                            "description": "The output element type.",
                            "kind": "parameter",
                            "name": "out_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[$1, 1]",
                        "returnsDoc": "The standard deviation of all of the member values of array as a SIMD Value of `dtype`.",
                        "signature": "cumpstdev[in_dtype: DType, out_dtype: DType = float64](array: NDArray[in_dtype], mu: Optional[SIMD[in_dtype, 1]] = #kgen.none) -> SIMD[$1, 1]",
                        "summary": "Population standard deviation of a array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "cumstdev",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[in_dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "default": "#kgen.none",
                            "description": "The mean of the array, if provided.",
                            "kind": "argument",
                            "name": "mu",
                            "passingKind": "pos_or_kw",
                            "type": "Optional[SIMD[in_dtype, 1]]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "cumstdev",
                        "parameters": [
                          {
                            "description": "The input element type.",
                            "kind": "parameter",
                            "name": "in_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "float64",
                            "description": "The output element type.",
                            "kind": "parameter",
                            "name": "out_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[$1, 1]",
                        "returnsDoc": "",
                        "signature": "cumstdev[in_dtype: DType, out_dtype: DType = float64](array: NDArray[in_dtype], mu: Optional[SIMD[in_dtype, 1]] = #kgen.none) -> SIMD[$1, 1]",
                        "summary": "Standard deviation of a array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "amin",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "An array.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[in_dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "amin",
                        "parameters": [
                          {
                            "description": "The input element type.",
                            "kind": "parameter",
                            "name": "in_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "float64",
                            "description": "The output element type.",
                            "kind": "parameter",
                            "name": "out_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[$1, 1]",
                        "returnsDoc": "",
                        "signature": "amin[in_dtype: DType, out_dtype: DType = float64](array: NDArray[in_dtype]) -> SIMD[$1, 1]",
                        "summary": "Minimum value of an array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "amax",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "A array.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[in_dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "amax",
                        "parameters": [
                          {
                            "description": "The input element type.",
                            "kind": "parameter",
                            "name": "in_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "float64",
                            "description": "The output element type.",
                            "kind": "parameter",
                            "name": "out_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[$1, 1]",
                        "returnsDoc": "",
                        "signature": "amax[in_dtype: DType, out_dtype: DType = float64](array: NDArray[in_dtype]) -> SIMD[$1, 1]",
                        "summary": "Maximum value of a array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "mimimum",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "A SIMD Value.",
                            "kind": "argument",
                            "name": "s1",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[in_dtype, 1]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A SIMD Value.",
                            "kind": "argument",
                            "name": "s2",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[in_dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mimimum",
                        "parameters": [
                          {
                            "description": "The input element type.",
                            "kind": "parameter",
                            "name": "in_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "float64",
                            "description": "The output element type.",
                            "kind": "parameter",
                            "name": "out_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "SIMD[$1, 1]",
                        "returnsDoc": "",
                        "signature": "mimimum[in_dtype: DType, out_dtype: DType = float64](s1: SIMD[in_dtype, 1], s2: SIMD[in_dtype, 1]) -> SIMD[$1, 1]",
                        "summary": "Minimum value of two SIMD values."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "maximum",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "A SIMD Value.",
                            "kind": "argument",
                            "name": "s1",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[in_dtype, 1]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A SIMD Value.",
                            "kind": "argument",
                            "name": "s2",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[in_dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "maximum",
                        "parameters": [
                          {
                            "description": "The input element type.",
                            "kind": "parameter",
                            "name": "in_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "float64",
                            "description": "The output element type.",
                            "kind": "parameter",
                            "name": "out_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": "SIMD[$1, 1]",
                        "returnsDoc": "",
                        "signature": "maximum[in_dtype: DType, out_dtype: DType = float64](s1: SIMD[in_dtype, 1], s2: SIMD[in_dtype, 1]) -> SIMD[$1, 1]",
                        "summary": "Maximum value of two SIMD values."
                      },
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "A array.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[in_dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A array.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[in_dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "maximum",
                        "parameters": [
                          {
                            "description": "The input element type.",
                            "kind": "parameter",
                            "name": "in_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "float64",
                            "description": "The output element type.",
                            "kind": "parameter",
                            "name": "out_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$1]",
                        "returnsDoc": "",
                        "signature": "maximum[in_dtype: DType, out_dtype: DType = float64](array1: NDArray[in_dtype], array2: NDArray[in_dtype]) -> NDArray[$1]",
                        "summary": "Element wise maximum of two arrays."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "minimum",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "An array.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[in_dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "An array.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[in_dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "minimum",
                        "parameters": [
                          {
                            "description": "The input element type.",
                            "kind": "parameter",
                            "name": "in_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "default": "float64",
                            "description": "The output element type.",
                            "kind": "parameter",
                            "name": "out_dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$1]",
                        "returnsDoc": "",
                        "signature": "minimum[in_dtype: DType, out_dtype: DType = float64](array1: NDArray[in_dtype], array2: NDArray[in_dtype]) -> NDArray[$1]",
                        "summary": "Element wise minimum of two arrays."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "argmax",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "A array.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "argmax",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "argmax[dtype: DType](array: NDArray[dtype]) -> Int",
                        "summary": "Argmax of a array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "argmin",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "A array.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "argmin",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "Int",
                        "returnsDoc": "",
                        "signature": "argmin[dtype: DType](array: NDArray[dtype]) -> Int",
                        "summary": "Argmin of a array. Parameters:     dtype: The element type."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "cumulative_reduce",
                "structs": [],
                "summary": "Cumulative reduction statistics functions for NDArrays",
                "traits": []
              },
              {
                "aliases": [],
                "description": "",
                "functions": [
                  {
                    "kind": "function",
                    "name": "sum",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "default": "0",
                            "description": "The axis along which the sum is performed.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sum",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "An NDArray.",
                        "signature": "sum(array: NDArray[dtype], axis: Int = 0) -> NDArray[$0]",
                        "summary": "Sum of array elements over a given axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "sumall",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```console\n> print(A)\n[[      0.1315377950668335      0.458650141954422       0.21895918250083923     ]\n[      0.67886471748352051     0.93469291925430298     0.51941639184951782     ]\n[      0.034572109580039978    0.52970021963119507     0.007698186207562685    ]]\n2-D array  Shape: [3, 3]  DType: float32\n> print(nm.math.stats.sumall(A))\n3.5140917301177979\n```\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "sumall",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[$0, 1]",
                        "returnsDoc": "Scalar.",
                        "signature": "sumall(array: NDArray[dtype]) -> SIMD[$0, 1]",
                        "summary": "Sum of all items in the array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "prod",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "default": "0",
                            "description": "The axis along which the product is performed.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "prod",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "An NDArray.",
                        "signature": "prod(array: NDArray[dtype], axis: Int = 0) -> NDArray[$0]",
                        "summary": "Product of array elements over a given axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "prodall",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```console\n> print(A)\n[[      0.1315377950668335      0.458650141954422       0.21895918250083923     ]\n[      0.67886471748352051     0.93469291925430298     0.51941639184951782     ]\n[      0.034572109580039978    0.52970021963119507     0.007698186207562685    ]]\n2-D array  Shape: [3, 3]  DType: float32\n\n> print(nm.math.stats.prodall(A))\n6.1377261317829834e-07\n```\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "prodall",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[$0, 1]",
                        "returnsDoc": "Scalar.",
                        "signature": "prodall(array: NDArray[dtype]) -> SIMD[$0, 1]",
                        "summary": "Product of all items in the array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "mean",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "default": "0",
                            "description": "",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "mean",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "",
                        "signature": "mean(array: NDArray[dtype], axis: Int = 0) -> NDArray[$0]",
                        "summary": "Mean of array elements over a given axis. Args:     array: NDArray.     axis: The axis along which the mean is performed. Returns:     An NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "meanall",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "Example:\n```console\n> print(A)\n[[      0.1315377950668335      0.458650141954422       0.21895918250083923     ]\n[      0.67886471748352051     0.93469291925430298     0.51941639184951782     ]\n[      0.034572109580039978    0.52970021963119507     0.007698186207562685    ]]\n2-D array  Shape: [3, 3]  DType: float32\n\n> print(nm.math.stats.meanall(A))\n0.39045463667975533\n```\n",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "meanall",
                        "parameters": [],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "SIMD[float64, 1]",
                        "returnsDoc": "Float64.",
                        "signature": "meanall(array: NDArray[dtype]) -> SIMD[float64, 1]",
                        "summary": "Mean of all items in the array."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "max",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "default": "0",
                            "description": "The axis along which the sum is performed.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "max",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "An NDArray.",
                        "signature": "max[dtype: DType](array: NDArray[dtype], axis: Int = 0) -> NDArray[$0]",
                        "summary": "Maximums of array elements over a given axis."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "min",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "default": "0",
                            "description": "The axis along which the sum is performed.",
                            "kind": "argument",
                            "name": "axis",
                            "passingKind": "pos_or_kw",
                            "type": "Int"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "min",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "An NDArray.",
                        "signature": "min[dtype: DType](array: NDArray[dtype], axis: Int = 0) -> NDArray[$0]",
                        "summary": "Minumums of array elements over a given axis."
                      }
                    ]
                  }
                ],
                "kind": "module",
                "name": "stats",
                "structs": [],
                "summary": "Statistics functions for NDArray",
                "traits": []
              }
            ],
            "name": "statistics",
            "packages": [],
            "summary": ""
          }
        ],
        "summary": ""
      },
      {
        "description": "",
        "kind": "package",
        "modules": [
          {
            "aliases": [],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "__init__",
            "structs": [],
            "summary": "Defines Numojo Traits",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "NDArrayTraits",
            "structs": [],
            "summary": "",
            "traits": []
          },
          {
            "aliases": [],
            "description": "",
            "functions": [],
            "kind": "module",
            "name": "backend",
            "structs": [],
            "summary": "",
            "traits": [
              {
                "deprecated": "",
                "description": "",
                "fields": [],
                "functions": [
                  {
                    "kind": "function",
                    "name": "__init__",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "inout",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos",
                            "type": "T"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "__init__",
                        "parameters": [],
                        "raises": false,
                        "raisesDoc": "",
                        "returnType": null,
                        "returnsDoc": "",
                        "signature": "__init__(inout self: T, /)",
                        "summary": "Initialize the backend."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_fma",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "T"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array3",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shape",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_fma",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "If shapes are missmatched or there is a access error.",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_fma[dtype: DType](self: T, array1: NDArray[dtype], array2: NDArray[dtype], array3: NDArray[dtype]) -> NDArray[$0]",
                        "summary": "Apply a SIMD level fuse multipy add function of three variables and one return to a NDArray."
                      },
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "T"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A SIMD[dtype,1] value to be added.",
                            "kind": "argument",
                            "name": "simd",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shape",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_fma",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_fma[dtype: DType](self: T, array1: NDArray[dtype], array2: NDArray[dtype], simd: SIMD[dtype, 1]) -> NDArray[$0]",
                        "summary": "Apply a SIMD level fuse multipy add function of three variables and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_1_array_in_one_array_out",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "T"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_1_array_in_one_array_out",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "The SIMD function to to apply.",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1]) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_1_array_in_one_array_out[dtype: DType, func: fn[DType, Int](SIMD[$0, $1]) -> SIMD[$0, $1]](self: T, array: NDArray[dtype]) -> NDArray[$0]",
                        "summary": "Apply a SIMD function of one variable and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_2_array_in_one_array_out",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "T"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shape",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_2_array_in_one_array_out",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "The SIMD function to to apply.",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_2_array_in_one_array_out[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]](self: T, array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[$0]",
                        "summary": "Apply a SIMD function of two variable and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_1_array_1_scalar_in_one_array_out",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "T"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A Scalars.",
                            "kind": "argument",
                            "name": "scalar",
                            "passingKind": "pos_or_kw",
                            "type": "SIMD[dtype, 1]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shape",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_1_array_1_scalar_in_one_array_out",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "The SIMD function to to apply.",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[$0]",
                        "returnsDoc": "A a new NDArray that is NDArray with the function func applied.",
                        "signature": "math_func_1_array_1_scalar_in_one_array_out[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[$0, $1]](self: T, array: NDArray[dtype], scalar: SIMD[dtype, 1]) -> NDArray[$0]",
                        "summary": "Apply a SIMD function of two variable and one return to a NDArray."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_compare_2_arrays",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "T"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array1",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          },
                          {
                            "convention": "borrowed",
                            "description": "A NDArray.",
                            "kind": "argument",
                            "name": "array2",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "Both arrays must have the same shape",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_compare_2_arrays",
                        "parameters": [
                          {
                            "description": "The element type.",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "The SIMD function to to apply.",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[bool, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "Boolean array with results of elementwise comparison.",
                        "signature": "math_func_compare_2_arrays[dtype: DType, func: fn[DType, Int](SIMD[$0, $1], SIMD[$0, $1]) -> SIMD[bool, $1]](self: T, array1: NDArray[dtype], array2: NDArray[dtype]) -> NDArray[bool]",
                        "summary": "Apply a SIMD comparison functions to two NDArrays."
                      }
                    ]
                  },
                  {
                    "kind": "function",
                    "name": "math_func_is",
                    "overloads": [
                      {
                        "args": [
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "self",
                            "passingKind": "pos_or_kw",
                            "type": "T"
                          },
                          {
                            "convention": "borrowed",
                            "description": "",
                            "kind": "argument",
                            "name": "array",
                            "passingKind": "pos_or_kw",
                            "type": "NDArray[dtype]"
                          }
                        ],
                        "async": false,
                        "constraints": "",
                        "deprecated": "",
                        "description": "",
                        "isDef": false,
                        "isStatic": false,
                        "kind": "function",
                        "name": "math_func_is",
                        "parameters": [
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "dtype",
                            "passingKind": "pos_or_kw",
                            "type": "DType"
                          },
                          {
                            "description": "",
                            "kind": "parameter",
                            "name": "func",
                            "passingKind": "pos_or_kw",
                            "type": "fn[DType, Int](SIMD[$0, $1]) -> SIMD[bool, $1]"
                          }
                        ],
                        "raises": true,
                        "raisesDoc": "",
                        "returnType": "NDArray[bool]",
                        "returnsDoc": "",
                        "signature": "math_func_is[dtype: DType, func: fn[DType, Int](SIMD[$0, $1]) -> SIMD[bool, $1]](self: T, array: NDArray[dtype]) -> NDArray[bool]",
                        "summary": ""
                      }
                    ]
                  }
                ],
                "kind": "trait",
                "name": "Backend",
                "parentTraits": [
                  "AnyType"
                ],
                "summary": "A trait that defines backends for calculations in the rest of the library."
              }
            ]
          }
        ],
        "name": "traits",
        "packages": [],
        "summary": "Defines Numojo Traits"
      }
    ],
    "summary": "An Array Mathematics library for Mojo."
  },
  "version": "24.4.0"
}